// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Foundation_Metadata_2_H
#define WINRT_Windows_Foundation_Metadata_2_H
#include "winrt/impl/Windows.Foundation.Metadata.1.h"
WINRT_EXPORT namespace winrt::Windows::Foundation::Metadata {
  struct ApiInformation {
    ApiInformation() = delete;
    static auto IsTypePresent(param::hstring const& typeName);
    static auto IsMethodPresent(param::hstring const& typeName,
                                param::hstring const& methodName);
    static auto IsMethodPresent(param::hstring const& typeName,
                                param::hstring const& methodName,
                                uint32_t inputParameterCount);
    static auto IsEventPresent(param::hstring const& typeName,
                               param::hstring const& eventName);
    static auto IsPropertyPresent(param::hstring const& typeName,
                                  param::hstring const& propertyName);
    static auto IsReadOnlyPropertyPresent(param::hstring const& typeName,
                                          param::hstring const& propertyName);
    static auto IsWriteablePropertyPresent(param::hstring const& typeName,
                                           param::hstring const& propertyName);
    static auto IsEnumNamedValuePresent(param::hstring const& enumTypeName,
                                        param::hstring const& valueName);
    static auto IsApiContractPresent(param::hstring const& contractName,
                                     uint16_t majorVersion);
    static auto IsApiContractPresent(param::hstring const& contractName,
                                     uint16_t majorVersion,
                                     uint16_t minorVersion);
  };
}
#endif
