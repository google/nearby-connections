// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Services_Cortana_2_H
#define WINRT_Windows_Services_Cortana_2_H
#include "winrt/impl/Windows.Services.Cortana.1.h"
#include "winrt/impl/Windows.System.1.h"
WINRT_EXPORT namespace winrt::Windows::Services::Cortana {
  struct __declspec(empty_bases) CortanaActionableInsights
      : winrt::Windows::Services::Cortana::ICortanaActionableInsights {
    CortanaActionableInsights(std::nullptr_t) noexcept {}
    CortanaActionableInsights(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Services::Cortana::ICortanaActionableInsights(
              ptr, take_ownership_from_abi) {}
    CortanaActionableInsights(CortanaActionableInsights const&) noexcept =
        default;
    CortanaActionableInsights(CortanaActionableInsights&&) noexcept = default;
    CortanaActionableInsights& operator=(
        CortanaActionableInsights const&) & noexcept = default;
    CortanaActionableInsights& operator=(
        CortanaActionableInsights&&) & noexcept = default;
    static auto GetDefault();
    static auto GetForUser(winrt::Windows::System::User const& user);
  };
  struct __declspec(empty_bases) CortanaActionableInsightsOptions
      : winrt::Windows::Services::Cortana::ICortanaActionableInsightsOptions {
    CortanaActionableInsightsOptions(std::nullptr_t) noexcept {}
    CortanaActionableInsightsOptions(void* ptr,
                                     take_ownership_from_abi_t) noexcept
        : winrt::Windows::Services::Cortana::ICortanaActionableInsightsOptions(
              ptr, take_ownership_from_abi) {}
    CortanaActionableInsightsOptions();
    CortanaActionableInsightsOptions(
        CortanaActionableInsightsOptions const&) noexcept = default;
    CortanaActionableInsightsOptions(
        CortanaActionableInsightsOptions&&) noexcept = default;
    CortanaActionableInsightsOptions& operator=(
        CortanaActionableInsightsOptions const&) & noexcept = default;
    CortanaActionableInsightsOptions& operator=(
        CortanaActionableInsightsOptions&&) & noexcept = default;
  };
  struct __declspec(empty_bases) CortanaPermissionsManager
      : winrt::Windows::Services::Cortana::ICortanaPermissionsManager {
    CortanaPermissionsManager(std::nullptr_t) noexcept {}
    CortanaPermissionsManager(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Services::Cortana::ICortanaPermissionsManager(
              ptr, take_ownership_from_abi) {}
    CortanaPermissionsManager(CortanaPermissionsManager const&) noexcept =
        default;
    CortanaPermissionsManager(CortanaPermissionsManager&&) noexcept = default;
    CortanaPermissionsManager& operator=(
        CortanaPermissionsManager const&) & noexcept = default;
    CortanaPermissionsManager& operator=(
        CortanaPermissionsManager&&) & noexcept = default;
    static auto GetDefault();
  };
  struct __declspec(empty_bases) CortanaSettings
      : winrt::Windows::Services::Cortana::ICortanaSettings {
    CortanaSettings(std::nullptr_t) noexcept {}
    CortanaSettings(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Services::Cortana::ICortanaSettings(
              ptr, take_ownership_from_abi) {}
    CortanaSettings(CortanaSettings const&) noexcept = default;
    CortanaSettings(CortanaSettings&&) noexcept = default;
    CortanaSettings& operator=(CortanaSettings const&) & noexcept = default;
    CortanaSettings& operator=(CortanaSettings&&) & noexcept = default;
    static auto IsSupported();
    static auto GetDefault();
  };
}
#endif
