// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Management_2_H
#define WINRT_Windows_Management_2_H
#include "winrt/impl/Windows.Management.1.h"
WINRT_EXPORT namespace winrt::Windows::Management {
  struct __declspec(empty_bases) MdmAlert
      : winrt::Windows::Management::IMdmAlert {
    MdmAlert(std::nullptr_t) noexcept {}
    MdmAlert(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Management::IMdmAlert(ptr, take_ownership_from_abi) {}
    MdmAlert();
    MdmAlert(MdmAlert const&) noexcept = default;
    MdmAlert(MdmAlert&&) noexcept = default;
    MdmAlert& operator=(MdmAlert const&) & noexcept = default;
    MdmAlert& operator=(MdmAlert&&) & noexcept = default;
  };
  struct __declspec(empty_bases) MdmSession
      : winrt::Windows::Management::IMdmSession {
    MdmSession(std::nullptr_t) noexcept {}
    MdmSession(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Management::IMdmSession(ptr,
                                                  take_ownership_from_abi) {}
    MdmSession(MdmSession const&) noexcept = default;
    MdmSession(MdmSession&&) noexcept = default;
    MdmSession& operator=(MdmSession const&) & noexcept = default;
    MdmSession& operator=(MdmSession&&) & noexcept = default;
  };
  struct MdmSessionManager {
    MdmSessionManager() = delete;
    [[nodiscard]] static auto SessionIds();
    static auto TryCreateSession();
    static auto DeleteSessionById(param::hstring const& sessionId);
    static auto GetSessionById(param::hstring const& sessionId);
  };
}
#endif
