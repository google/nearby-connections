// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Globalization_PhoneNumberFormatting_2_H
#define WINRT_Windows_Globalization_PhoneNumberFormatting_2_H
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Windows.Globalization.PhoneNumberFormatting.1.h"
WINRT_EXPORT namespace winrt::Windows::Globalization::PhoneNumberFormatting {
  struct __declspec(empty_bases) PhoneNumberFormatter
      : winrt::Windows::Globalization::PhoneNumberFormatting::
            IPhoneNumberFormatter {
    PhoneNumberFormatter(std::nullptr_t) noexcept {}
    PhoneNumberFormatter(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Globalization::PhoneNumberFormatting::
              IPhoneNumberFormatter(ptr, take_ownership_from_abi) {}
    PhoneNumberFormatter();
    PhoneNumberFormatter(PhoneNumberFormatter const&) noexcept = default;
    PhoneNumberFormatter(PhoneNumberFormatter&&) noexcept = default;
    PhoneNumberFormatter& operator=(PhoneNumberFormatter const&) & noexcept =
        default;
    PhoneNumberFormatter& operator=(PhoneNumberFormatter&&) & noexcept =
        default;
    static auto TryCreate(param::hstring const& regionCode,
                          winrt::Windows::Globalization::PhoneNumberFormatting::
                              PhoneNumberFormatter& phoneNumber);
    static auto GetCountryCodeForRegion(param::hstring const& regionCode);
    static auto GetNationalDirectDialingPrefixForRegion(
        param::hstring const& regionCode, bool stripNonDigit);
    static auto WrapWithLeftToRightMarkers(param::hstring const& number);
  };
  struct __declspec(empty_bases) PhoneNumberInfo
      : winrt::Windows::Globalization::PhoneNumberFormatting::IPhoneNumberInfo,
        impl::require<PhoneNumberInfo,
                      winrt::Windows::Foundation::IStringable> {
    PhoneNumberInfo(std::nullptr_t) noexcept {}
    PhoneNumberInfo(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Globalization::PhoneNumberFormatting::
              IPhoneNumberInfo(ptr, take_ownership_from_abi) {}
    explicit PhoneNumberInfo(param::hstring const& number);
    PhoneNumberInfo(PhoneNumberInfo const&) noexcept = default;
    PhoneNumberInfo(PhoneNumberInfo&&) noexcept = default;
    PhoneNumberInfo& operator=(PhoneNumberInfo const&) & noexcept = default;
    PhoneNumberInfo& operator=(PhoneNumberInfo&&) & noexcept = default;
    static auto TryParse(
        param::hstring const& input,
        winrt::Windows::Globalization::PhoneNumberFormatting::PhoneNumberInfo&
            phoneNumber);
    static auto TryParse(
        param::hstring const& input, param::hstring const& regionCode,
        winrt::Windows::Globalization::PhoneNumberFormatting::PhoneNumberInfo&
            phoneNumber);
  };
}
#endif
