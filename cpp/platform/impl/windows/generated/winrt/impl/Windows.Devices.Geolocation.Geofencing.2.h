// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Devices_Geolocation_Geofencing_2_H
#define WINRT_Windows_Devices_Geolocation_Geofencing_2_H
#include "winrt/impl/Windows.Devices.Geolocation.1.h"
#include "winrt/impl/Windows.Devices.Geolocation.Geofencing.1.h"
#include "winrt/impl/Windows.Foundation.1.h"
WINRT_EXPORT namespace winrt::Windows::Devices::Geolocation::Geofencing {
  struct __declspec(empty_bases) Geofence
      : winrt::Windows::Devices::Geolocation::Geofencing::IGeofence {
    Geofence(std::nullptr_t) noexcept {}
    Geofence(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Devices::Geolocation::Geofencing::IGeofence(
              ptr, take_ownership_from_abi) {}
    Geofence(param::hstring const& id,
             winrt::Windows::Devices::Geolocation::IGeoshape const& geoshape);
    Geofence(param::hstring const& id,
             winrt::Windows::Devices::Geolocation::IGeoshape const& geoshape,
             winrt::Windows::Devices::Geolocation::Geofencing::
                 MonitoredGeofenceStates const& monitoredStates,
             bool singleUse);
    Geofence(param::hstring const& id,
             winrt::Windows::Devices::Geolocation::IGeoshape const& geoshape,
             winrt::Windows::Devices::Geolocation::Geofencing::
                 MonitoredGeofenceStates const& monitoredStates,
             bool singleUse,
             winrt::Windows::Foundation::TimeSpan const& dwellTime);
    Geofence(param::hstring const& id,
             winrt::Windows::Devices::Geolocation::IGeoshape const& geoshape,
             winrt::Windows::Devices::Geolocation::Geofencing::
                 MonitoredGeofenceStates const& monitoredStates,
             bool singleUse,
             winrt::Windows::Foundation::TimeSpan const& dwellTime,
             winrt::Windows::Foundation::DateTime const& startTime,
             winrt::Windows::Foundation::TimeSpan const& duration);
    Geofence(Geofence const&) noexcept = default;
    Geofence(Geofence&&) noexcept = default;
    Geofence& operator=(Geofence const&) & noexcept = default;
    Geofence& operator=(Geofence&&) & noexcept = default;
  };
  struct __declspec(empty_bases) GeofenceMonitor
      : winrt::Windows::Devices::Geolocation::Geofencing::IGeofenceMonitor {
    GeofenceMonitor(std::nullptr_t) noexcept {}
    GeofenceMonitor(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Devices::Geolocation::Geofencing::IGeofenceMonitor(
              ptr, take_ownership_from_abi) {}
    GeofenceMonitor(GeofenceMonitor const&) noexcept = default;
    GeofenceMonitor(GeofenceMonitor&&) noexcept = default;
    GeofenceMonitor& operator=(GeofenceMonitor const&) & noexcept = default;
    GeofenceMonitor& operator=(GeofenceMonitor&&) & noexcept = default;
    [[nodiscard]] static auto Current();
  };
  struct __declspec(empty_bases) GeofenceStateChangeReport
      : winrt::Windows::Devices::Geolocation::Geofencing::
            IGeofenceStateChangeReport {
    GeofenceStateChangeReport(std::nullptr_t) noexcept {}
    GeofenceStateChangeReport(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Devices::Geolocation::Geofencing::
              IGeofenceStateChangeReport(ptr, take_ownership_from_abi) {}
    GeofenceStateChangeReport(GeofenceStateChangeReport const&) noexcept =
        default;
    GeofenceStateChangeReport(GeofenceStateChangeReport&&) noexcept = default;
    GeofenceStateChangeReport& operator=(
        GeofenceStateChangeReport const&) & noexcept = default;
    GeofenceStateChangeReport& operator=(
        GeofenceStateChangeReport&&) & noexcept = default;
  };
}
#endif
