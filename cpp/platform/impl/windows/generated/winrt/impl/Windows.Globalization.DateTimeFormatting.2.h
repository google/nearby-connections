// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Globalization_DateTimeFormatting_2_H
#define WINRT_Windows_Globalization_DateTimeFormatting_2_H
#include "winrt/impl/Windows.Foundation.Collections.1.h"
#include "winrt/impl/Windows.Globalization.DateTimeFormatting.1.h"
WINRT_EXPORT namespace winrt::Windows::Globalization::DateTimeFormatting {
  struct __declspec(empty_bases) DateTimeFormatter
      : winrt::Windows::Globalization::DateTimeFormatting::IDateTimeFormatter,
        impl::require<DateTimeFormatter,
                      winrt::Windows::Globalization::DateTimeFormatting::
                          IDateTimeFormatter2> {
    DateTimeFormatter(std::nullptr_t) noexcept {}
    DateTimeFormatter(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Globalization::DateTimeFormatting::IDateTimeFormatter(
              ptr, take_ownership_from_abi) {}
    explicit DateTimeFormatter(param::hstring const& formatTemplate);
    DateTimeFormatter(param::hstring const& formatTemplate,
                      param::iterable<hstring> const& languages);
    DateTimeFormatter(param::hstring const& formatTemplate,
                      param::iterable<hstring> const& languages,
                      param::hstring const& geographicRegion,
                      param::hstring const& calendar,
                      param::hstring const& clock);
    DateTimeFormatter(
        winrt::Windows::Globalization::DateTimeFormatting::YearFormat const&
            yearFormat,
        winrt::Windows::Globalization::DateTimeFormatting::MonthFormat const&
            monthFormat,
        winrt::Windows::Globalization::DateTimeFormatting::DayFormat const&
            dayFormat,
        winrt::Windows::Globalization::DateTimeFormatting::
            DayOfWeekFormat const& dayOfWeekFormat);
    DateTimeFormatter(
        winrt::Windows::Globalization::DateTimeFormatting::HourFormat const&
            hourFormat,
        winrt::Windows::Globalization::DateTimeFormatting::MinuteFormat const&
            minuteFormat,
        winrt::Windows::Globalization::DateTimeFormatting::SecondFormat const&
            secondFormat);
    DateTimeFormatter(
        winrt::Windows::Globalization::DateTimeFormatting::YearFormat const&
            yearFormat,
        winrt::Windows::Globalization::DateTimeFormatting::MonthFormat const&
            monthFormat,
        winrt::Windows::Globalization::DateTimeFormatting::DayFormat const&
            dayFormat,
        winrt::Windows::Globalization::DateTimeFormatting::
            DayOfWeekFormat const& dayOfWeekFormat,
        winrt::Windows::Globalization::DateTimeFormatting::HourFormat const&
            hourFormat,
        winrt::Windows::Globalization::DateTimeFormatting::MinuteFormat const&
            minuteFormat,
        winrt::Windows::Globalization::DateTimeFormatting::SecondFormat const&
            secondFormat,
        param::iterable<hstring> const& languages);
    DateTimeFormatter(
        winrt::Windows::Globalization::DateTimeFormatting::YearFormat const&
            yearFormat,
        winrt::Windows::Globalization::DateTimeFormatting::MonthFormat const&
            monthFormat,
        winrt::Windows::Globalization::DateTimeFormatting::DayFormat const&
            dayFormat,
        winrt::Windows::Globalization::DateTimeFormatting::
            DayOfWeekFormat const& dayOfWeekFormat,
        winrt::Windows::Globalization::DateTimeFormatting::HourFormat const&
            hourFormat,
        winrt::Windows::Globalization::DateTimeFormatting::MinuteFormat const&
            minuteFormat,
        winrt::Windows::Globalization::DateTimeFormatting::SecondFormat const&
            secondFormat,
        param::iterable<hstring> const& languages,
        param::hstring const& geographicRegion, param::hstring const& calendar,
        param::hstring const& clock);
    DateTimeFormatter(DateTimeFormatter const&) noexcept = default;
    DateTimeFormatter(DateTimeFormatter&&) noexcept = default;
    DateTimeFormatter& operator=(DateTimeFormatter const&) & noexcept = default;
    DateTimeFormatter& operator=(DateTimeFormatter&&) & noexcept = default;
    using winrt::Windows::Globalization::DateTimeFormatting::
        IDateTimeFormatter::Format;
    using impl::consume_t<DateTimeFormatter,
                          winrt::Windows::Globalization::DateTimeFormatting::
                              IDateTimeFormatter2>::Format;
    [[nodiscard]] static auto LongDate();
    [[nodiscard]] static auto LongTime();
    [[nodiscard]] static auto ShortDate();
    [[nodiscard]] static auto ShortTime();
  };
}
#endif
