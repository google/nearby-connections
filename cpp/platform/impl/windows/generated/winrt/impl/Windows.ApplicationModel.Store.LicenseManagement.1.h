// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_ApplicationModel_Store_LicenseManagement_1_H
#define WINRT_Windows_ApplicationModel_Store_LicenseManagement_1_H
#include "winrt/impl/Windows.ApplicationModel.Store.LicenseManagement.0.h"
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Store::
    LicenseManagement {
  struct __declspec(empty_bases) ILicenseManagerStatics
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILicenseManagerStatics> {
    ILicenseManagerStatics(std::nullptr_t = nullptr) noexcept {}
    ILicenseManagerStatics(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    ILicenseManagerStatics(ILicenseManagerStatics const&) noexcept = default;
    ILicenseManagerStatics(ILicenseManagerStatics&&) noexcept = default;
    ILicenseManagerStatics& operator=(
        ILicenseManagerStatics const&) & noexcept = default;
    ILicenseManagerStatics& operator=(ILicenseManagerStatics&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) ILicenseManagerStatics2
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILicenseManagerStatics2> {
    ILicenseManagerStatics2(std::nullptr_t = nullptr) noexcept {}
    ILicenseManagerStatics2(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    ILicenseManagerStatics2(ILicenseManagerStatics2 const&) noexcept = default;
    ILicenseManagerStatics2(ILicenseManagerStatics2&&) noexcept = default;
    ILicenseManagerStatics2& operator=(
        ILicenseManagerStatics2 const&) & noexcept = default;
    ILicenseManagerStatics2& operator=(ILicenseManagerStatics2&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) ILicenseSatisfactionInfo
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILicenseSatisfactionInfo> {
    ILicenseSatisfactionInfo(std::nullptr_t = nullptr) noexcept {}
    ILicenseSatisfactionInfo(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    ILicenseSatisfactionInfo(ILicenseSatisfactionInfo const&) noexcept =
        default;
    ILicenseSatisfactionInfo(ILicenseSatisfactionInfo&&) noexcept = default;
    ILicenseSatisfactionInfo& operator=(
        ILicenseSatisfactionInfo const&) & noexcept = default;
    ILicenseSatisfactionInfo& operator=(ILicenseSatisfactionInfo&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) ILicenseSatisfactionResult
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILicenseSatisfactionResult> {
    ILicenseSatisfactionResult(std::nullptr_t = nullptr) noexcept {}
    ILicenseSatisfactionResult(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    ILicenseSatisfactionResult(ILicenseSatisfactionResult const&) noexcept =
        default;
    ILicenseSatisfactionResult(ILicenseSatisfactionResult&&) noexcept = default;
    ILicenseSatisfactionResult& operator=(
        ILicenseSatisfactionResult const&) & noexcept = default;
    ILicenseSatisfactionResult& operator=(
        ILicenseSatisfactionResult&&) & noexcept = default;
  };
}
#endif
