// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_ApplicationModel_CommunicationBlocking_1_H
#define WINRT_Windows_ApplicationModel_CommunicationBlocking_1_H
#include "winrt/impl/Windows.ApplicationModel.CommunicationBlocking.0.h"
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::CommunicationBlocking {
  struct __declspec(empty_bases) ICommunicationBlockingAccessManagerStatics
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICommunicationBlockingAccessManagerStatics> {
    ICommunicationBlockingAccessManagerStatics(
        std::nullptr_t = nullptr) noexcept {}
    ICommunicationBlockingAccessManagerStatics(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    ICommunicationBlockingAccessManagerStatics(
        ICommunicationBlockingAccessManagerStatics const&) noexcept = default;
    ICommunicationBlockingAccessManagerStatics(
        ICommunicationBlockingAccessManagerStatics&&) noexcept = default;
    ICommunicationBlockingAccessManagerStatics& operator=(
        ICommunicationBlockingAccessManagerStatics const&) & noexcept = default;
    ICommunicationBlockingAccessManagerStatics& operator=(
        ICommunicationBlockingAccessManagerStatics&&) & noexcept = default;
  };
  struct __declspec(empty_bases) ICommunicationBlockingAppManagerStatics
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICommunicationBlockingAppManagerStatics> {
    ICommunicationBlockingAppManagerStatics(std::nullptr_t = nullptr) noexcept {
    }
    ICommunicationBlockingAppManagerStatics(void* ptr,
                                            take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    ICommunicationBlockingAppManagerStatics(
        ICommunicationBlockingAppManagerStatics const&) noexcept = default;
    ICommunicationBlockingAppManagerStatics(
        ICommunicationBlockingAppManagerStatics&&) noexcept = default;
    ICommunicationBlockingAppManagerStatics& operator=(
        ICommunicationBlockingAppManagerStatics const&) & noexcept = default;
    ICommunicationBlockingAppManagerStatics& operator=(
        ICommunicationBlockingAppManagerStatics&&) & noexcept = default;
  };
  struct __declspec(empty_bases) ICommunicationBlockingAppManagerStatics2
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICommunicationBlockingAppManagerStatics2>,
        impl::require<winrt::Windows::ApplicationModel::CommunicationBlocking::
                          ICommunicationBlockingAppManagerStatics2,
                      winrt::Windows::ApplicationModel::CommunicationBlocking::
                          ICommunicationBlockingAppManagerStatics> {
    ICommunicationBlockingAppManagerStatics2(
        std::nullptr_t = nullptr) noexcept {}
    ICommunicationBlockingAppManagerStatics2(void* ptr,
                                             take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    ICommunicationBlockingAppManagerStatics2(
        ICommunicationBlockingAppManagerStatics2 const&) noexcept = default;
    ICommunicationBlockingAppManagerStatics2(
        ICommunicationBlockingAppManagerStatics2&&) noexcept = default;
    ICommunicationBlockingAppManagerStatics2& operator=(
        ICommunicationBlockingAppManagerStatics2 const&) & noexcept = default;
    ICommunicationBlockingAppManagerStatics2& operator=(
        ICommunicationBlockingAppManagerStatics2&&) & noexcept = default;
  };
}
#endif
