// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Devices_Background_2_H
#define WINRT_Windows_Devices_Background_2_H
#include "winrt/impl/Windows.Devices.Background.1.h"
WINRT_EXPORT namespace winrt::Windows::Devices::Background {
  struct __declspec(empty_bases) DeviceServicingDetails
      : winrt::Windows::Devices::Background::IDeviceServicingDetails {
    DeviceServicingDetails(std::nullptr_t) noexcept {}
    DeviceServicingDetails(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Devices::Background::IDeviceServicingDetails(
              ptr, take_ownership_from_abi) {}
    DeviceServicingDetails(DeviceServicingDetails const&) noexcept = default;
    DeviceServicingDetails(DeviceServicingDetails&&) noexcept = default;
    DeviceServicingDetails& operator=(
        DeviceServicingDetails const&) & noexcept = default;
    DeviceServicingDetails& operator=(DeviceServicingDetails&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) DeviceUseDetails
      : winrt::Windows::Devices::Background::IDeviceUseDetails {
    DeviceUseDetails(std::nullptr_t) noexcept {}
    DeviceUseDetails(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Devices::Background::IDeviceUseDetails(
              ptr, take_ownership_from_abi) {}
    DeviceUseDetails(DeviceUseDetails const&) noexcept = default;
    DeviceUseDetails(DeviceUseDetails&&) noexcept = default;
    DeviceUseDetails& operator=(DeviceUseDetails const&) & noexcept = default;
    DeviceUseDetails& operator=(DeviceUseDetails&&) & noexcept = default;
  };
}
#endif
