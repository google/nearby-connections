// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_System_Preview_2_H
#define WINRT_Windows_System_Preview_2_H
#include "winrt/impl/Windows.System.Preview.1.h"
WINRT_EXPORT namespace winrt::Windows::System::Preview {
  struct __declspec(empty_bases) TwoPanelHingedDevicePosturePreview
      : winrt::Windows::System::Preview::ITwoPanelHingedDevicePosturePreview {
    TwoPanelHingedDevicePosturePreview(std::nullptr_t) noexcept {}
    TwoPanelHingedDevicePosturePreview(void* ptr,
                                       take_ownership_from_abi_t) noexcept
        : winrt::Windows::System::Preview::ITwoPanelHingedDevicePosturePreview(
              ptr, take_ownership_from_abi) {}
    TwoPanelHingedDevicePosturePreview(
        TwoPanelHingedDevicePosturePreview const&) noexcept = default;
    TwoPanelHingedDevicePosturePreview(
        TwoPanelHingedDevicePosturePreview&&) noexcept = default;
    TwoPanelHingedDevicePosturePreview& operator=(
        TwoPanelHingedDevicePosturePreview const&) & noexcept = default;
    TwoPanelHingedDevicePosturePreview& operator=(
        TwoPanelHingedDevicePosturePreview&&) & noexcept = default;
    static auto GetDefaultAsync();
  };
  struct __declspec(empty_bases) TwoPanelHingedDevicePosturePreviewReading
      : winrt::Windows::System::Preview::
            ITwoPanelHingedDevicePosturePreviewReading {
    TwoPanelHingedDevicePosturePreviewReading(std::nullptr_t) noexcept {}
    TwoPanelHingedDevicePosturePreviewReading(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::System::Preview::
              ITwoPanelHingedDevicePosturePreviewReading(
                  ptr, take_ownership_from_abi) {}
    TwoPanelHingedDevicePosturePreviewReading(
        TwoPanelHingedDevicePosturePreviewReading const&) noexcept = default;
    TwoPanelHingedDevicePosturePreviewReading(
        TwoPanelHingedDevicePosturePreviewReading&&) noexcept = default;
    TwoPanelHingedDevicePosturePreviewReading& operator=(
        TwoPanelHingedDevicePosturePreviewReading const&) & noexcept = default;
    TwoPanelHingedDevicePosturePreviewReading& operator=(
        TwoPanelHingedDevicePosturePreviewReading&&) & noexcept = default;
  };
  struct __declspec(empty_bases)
      TwoPanelHingedDevicePosturePreviewReadingChangedEventArgs
      : winrt::Windows::System::Preview::
            ITwoPanelHingedDevicePosturePreviewReadingChangedEventArgs {
    TwoPanelHingedDevicePosturePreviewReadingChangedEventArgs(
        std::nullptr_t) noexcept {}
    TwoPanelHingedDevicePosturePreviewReadingChangedEventArgs(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::System::Preview::
              ITwoPanelHingedDevicePosturePreviewReadingChangedEventArgs(
                  ptr, take_ownership_from_abi) {}
    TwoPanelHingedDevicePosturePreviewReadingChangedEventArgs(
        TwoPanelHingedDevicePosturePreviewReadingChangedEventArgs const&) noexcept =
        default;
    TwoPanelHingedDevicePosturePreviewReadingChangedEventArgs(
        TwoPanelHingedDevicePosturePreviewReadingChangedEventArgs&&) noexcept =
        default;
    TwoPanelHingedDevicePosturePreviewReadingChangedEventArgs& operator=(
        TwoPanelHingedDevicePosturePreviewReadingChangedEventArgs const&) & noexcept =
        default;
    TwoPanelHingedDevicePosturePreviewReadingChangedEventArgs& operator=(
        TwoPanelHingedDevicePosturePreviewReadingChangedEventArgs&&) & noexcept =
        default;
  };
}
#endif
