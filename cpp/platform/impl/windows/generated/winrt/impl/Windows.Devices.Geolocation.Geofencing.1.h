// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Devices_Geolocation_Geofencing_1_H
#define WINRT_Windows_Devices_Geolocation_Geofencing_1_H
#include "winrt/impl/Windows.Devices.Geolocation.Geofencing.0.h"
WINRT_EXPORT namespace winrt::Windows::Devices::Geolocation::Geofencing {
  struct __declspec(empty_bases) IGeofence
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGeofence> {
    IGeofence(std::nullptr_t = nullptr) noexcept {}
    IGeofence(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IGeofence(IGeofence const&) noexcept = default;
    IGeofence(IGeofence&&) noexcept = default;
    IGeofence& operator=(IGeofence const&) & noexcept = default;
    IGeofence& operator=(IGeofence&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IGeofenceFactory
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGeofenceFactory> {
    IGeofenceFactory(std::nullptr_t = nullptr) noexcept {}
    IGeofenceFactory(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IGeofenceFactory(IGeofenceFactory const&) noexcept = default;
    IGeofenceFactory(IGeofenceFactory&&) noexcept = default;
    IGeofenceFactory& operator=(IGeofenceFactory const&) & noexcept = default;
    IGeofenceFactory& operator=(IGeofenceFactory&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IGeofenceMonitor
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGeofenceMonitor> {
    IGeofenceMonitor(std::nullptr_t = nullptr) noexcept {}
    IGeofenceMonitor(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IGeofenceMonitor(IGeofenceMonitor const&) noexcept = default;
    IGeofenceMonitor(IGeofenceMonitor&&) noexcept = default;
    IGeofenceMonitor& operator=(IGeofenceMonitor const&) & noexcept = default;
    IGeofenceMonitor& operator=(IGeofenceMonitor&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IGeofenceMonitorStatics
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGeofenceMonitorStatics> {
    IGeofenceMonitorStatics(std::nullptr_t = nullptr) noexcept {}
    IGeofenceMonitorStatics(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IGeofenceMonitorStatics(IGeofenceMonitorStatics const&) noexcept = default;
    IGeofenceMonitorStatics(IGeofenceMonitorStatics&&) noexcept = default;
    IGeofenceMonitorStatics& operator=(
        IGeofenceMonitorStatics const&) & noexcept = default;
    IGeofenceMonitorStatics& operator=(IGeofenceMonitorStatics&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) IGeofenceStateChangeReport
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGeofenceStateChangeReport> {
    IGeofenceStateChangeReport(std::nullptr_t = nullptr) noexcept {}
    IGeofenceStateChangeReport(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IGeofenceStateChangeReport(IGeofenceStateChangeReport const&) noexcept =
        default;
    IGeofenceStateChangeReport(IGeofenceStateChangeReport&&) noexcept = default;
    IGeofenceStateChangeReport& operator=(
        IGeofenceStateChangeReport const&) & noexcept = default;
    IGeofenceStateChangeReport& operator=(
        IGeofenceStateChangeReport&&) & noexcept = default;
  };
}
#endif
