// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Gaming_Input_ForceFeedback_2_H
#define WINRT_Windows_Gaming_Input_ForceFeedback_2_H
#include "winrt/impl/Windows.Gaming.Input.ForceFeedback.1.h"
WINRT_EXPORT namespace winrt::Windows::Gaming::Input::ForceFeedback {
  struct __declspec(empty_bases) ConditionForceEffect
      : winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect,
        impl::require<ConditionForceEffect,
                      winrt::Windows::Gaming::Input::ForceFeedback::
                          IConditionForceEffect> {
    ConditionForceEffect(std::nullptr_t) noexcept {}
    ConditionForceEffect(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect(
              ptr, take_ownership_from_abi) {}
    explicit ConditionForceEffect(
        winrt::Windows::Gaming::Input::ForceFeedback::
            ConditionForceEffectKind const& effectKind);
    ConditionForceEffect(ConditionForceEffect const&) noexcept = default;
    ConditionForceEffect(ConditionForceEffect&&) noexcept = default;
    ConditionForceEffect& operator=(ConditionForceEffect const&) & noexcept =
        default;
    ConditionForceEffect& operator=(ConditionForceEffect&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) ConstantForceEffect
      : winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect,
        impl::require<ConstantForceEffect,
                      winrt::Windows::Gaming::Input::ForceFeedback::
                          IConstantForceEffect> {
    ConstantForceEffect(std::nullptr_t) noexcept {}
    ConstantForceEffect(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect(
              ptr, take_ownership_from_abi) {}
    ConstantForceEffect();
    ConstantForceEffect(ConstantForceEffect const&) noexcept = default;
    ConstantForceEffect(ConstantForceEffect&&) noexcept = default;
    ConstantForceEffect& operator=(ConstantForceEffect const&) & noexcept =
        default;
    ConstantForceEffect& operator=(ConstantForceEffect&&) & noexcept = default;
  };
  struct __declspec(empty_bases) ForceFeedbackMotor
      : winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackMotor {
    ForceFeedbackMotor(std::nullptr_t) noexcept {}
    ForceFeedbackMotor(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackMotor(
              ptr, take_ownership_from_abi) {}
    ForceFeedbackMotor(ForceFeedbackMotor const&) noexcept = default;
    ForceFeedbackMotor(ForceFeedbackMotor&&) noexcept = default;
    ForceFeedbackMotor& operator=(ForceFeedbackMotor const&) & noexcept =
        default;
    ForceFeedbackMotor& operator=(ForceFeedbackMotor&&) & noexcept = default;
  };
  struct __declspec(empty_bases) PeriodicForceEffect
      : winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect,
        impl::require<PeriodicForceEffect,
                      winrt::Windows::Gaming::Input::ForceFeedback::
                          IPeriodicForceEffect> {
    PeriodicForceEffect(std::nullptr_t) noexcept {}
    PeriodicForceEffect(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect(
              ptr, take_ownership_from_abi) {}
    explicit PeriodicForceEffect(winrt::Windows::Gaming::Input::ForceFeedback::
                                     PeriodicForceEffectKind const& effectKind);
    PeriodicForceEffect(PeriodicForceEffect const&) noexcept = default;
    PeriodicForceEffect(PeriodicForceEffect&&) noexcept = default;
    PeriodicForceEffect& operator=(PeriodicForceEffect const&) & noexcept =
        default;
    PeriodicForceEffect& operator=(PeriodicForceEffect&&) & noexcept = default;
  };
  struct __declspec(empty_bases) RampForceEffect
      : winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect,
        impl::require<
            RampForceEffect,
            winrt::Windows::Gaming::Input::ForceFeedback::IRampForceEffect> {
    RampForceEffect(std::nullptr_t) noexcept {}
    RampForceEffect(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect(
              ptr, take_ownership_from_abi) {}
    RampForceEffect();
    RampForceEffect(RampForceEffect const&) noexcept = default;
    RampForceEffect(RampForceEffect&&) noexcept = default;
    RampForceEffect& operator=(RampForceEffect const&) & noexcept = default;
    RampForceEffect& operator=(RampForceEffect&&) & noexcept = default;
  };
}
#endif
