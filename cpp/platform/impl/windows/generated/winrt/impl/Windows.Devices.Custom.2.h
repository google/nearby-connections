// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Devices_Custom_2_H
#define WINRT_Windows_Devices_Custom_2_H
#include "winrt/impl/Windows.Devices.Custom.1.h"
WINRT_EXPORT namespace winrt::Windows::Devices::Custom {
  struct __declspec(empty_bases) CustomDevice
      : winrt::Windows::Devices::Custom::ICustomDevice {
    CustomDevice(std::nullptr_t) noexcept {}
    CustomDevice(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Devices::Custom::ICustomDevice(
              ptr, take_ownership_from_abi) {}
    CustomDevice(CustomDevice const&) noexcept = default;
    CustomDevice(CustomDevice&&) noexcept = default;
    CustomDevice& operator=(CustomDevice const&) & noexcept = default;
    CustomDevice& operator=(CustomDevice&&) & noexcept = default;
    static auto GetDeviceSelector(winrt::guid const& classGuid);
    static auto FromIdAsync(
        param::hstring const& deviceId,
        winrt::Windows::Devices::Custom::DeviceAccessMode const& desiredAccess,
        winrt::Windows::Devices::Custom::DeviceSharingMode const& sharingMode);
  };
  struct __declspec(empty_bases) IOControlCode
      : winrt::Windows::Devices::Custom::IIOControlCode {
    IOControlCode(std::nullptr_t) noexcept {}
    IOControlCode(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Devices::Custom::IIOControlCode(
              ptr, take_ownership_from_abi) {}
    IOControlCode(
        uint16_t deviceType, uint16_t function,
        winrt::Windows::Devices::Custom::IOControlAccessMode const& accessMode,
        winrt::Windows::Devices::Custom::IOControlBufferingMethod const&
            bufferingMethod);
    IOControlCode(IOControlCode const&) noexcept = default;
    IOControlCode(IOControlCode&&) noexcept = default;
    IOControlCode& operator=(IOControlCode const&) & noexcept = default;
    IOControlCode& operator=(IOControlCode&&) & noexcept = default;
  };
  struct KnownDeviceTypes {
    KnownDeviceTypes() = delete;
    [[nodiscard]] static auto Unknown();
  };
}
#endif
