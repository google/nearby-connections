// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Security_Authentication_Identity_1_H
#define WINRT_Windows_Security_Authentication_Identity_1_H
#include "winrt/impl/Windows.Security.Authentication.Identity.0.h"
WINRT_EXPORT namespace winrt::Windows::Security::Authentication::Identity {
  struct __declspec(empty_bases) IEnterpriseKeyCredentialRegistrationInfo
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IEnterpriseKeyCredentialRegistrationInfo> {
    IEnterpriseKeyCredentialRegistrationInfo(
        std::nullptr_t = nullptr) noexcept {}
    IEnterpriseKeyCredentialRegistrationInfo(void* ptr,
                                             take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IEnterpriseKeyCredentialRegistrationInfo(
        IEnterpriseKeyCredentialRegistrationInfo const&) noexcept = default;
    IEnterpriseKeyCredentialRegistrationInfo(
        IEnterpriseKeyCredentialRegistrationInfo&&) noexcept = default;
    IEnterpriseKeyCredentialRegistrationInfo& operator=(
        IEnterpriseKeyCredentialRegistrationInfo const&) & noexcept = default;
    IEnterpriseKeyCredentialRegistrationInfo& operator=(
        IEnterpriseKeyCredentialRegistrationInfo&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IEnterpriseKeyCredentialRegistrationManager
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IEnterpriseKeyCredentialRegistrationManager> {
    IEnterpriseKeyCredentialRegistrationManager(
        std::nullptr_t = nullptr) noexcept {}
    IEnterpriseKeyCredentialRegistrationManager(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IEnterpriseKeyCredentialRegistrationManager(
        IEnterpriseKeyCredentialRegistrationManager const&) noexcept = default;
    IEnterpriseKeyCredentialRegistrationManager(
        IEnterpriseKeyCredentialRegistrationManager&&) noexcept = default;
    IEnterpriseKeyCredentialRegistrationManager& operator=(
        IEnterpriseKeyCredentialRegistrationManager const&) & noexcept =
        default;
    IEnterpriseKeyCredentialRegistrationManager& operator=(
        IEnterpriseKeyCredentialRegistrationManager&&) & noexcept = default;
  };
  struct __declspec(empty_bases)
      IEnterpriseKeyCredentialRegistrationManagerStatics
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IEnterpriseKeyCredentialRegistrationManagerStatics> {
    IEnterpriseKeyCredentialRegistrationManagerStatics(
        std::nullptr_t = nullptr) noexcept {}
    IEnterpriseKeyCredentialRegistrationManagerStatics(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IEnterpriseKeyCredentialRegistrationManagerStatics(
        IEnterpriseKeyCredentialRegistrationManagerStatics const&) noexcept =
        default;
    IEnterpriseKeyCredentialRegistrationManagerStatics(
        IEnterpriseKeyCredentialRegistrationManagerStatics&&) noexcept =
        default;
    IEnterpriseKeyCredentialRegistrationManagerStatics& operator=(
        IEnterpriseKeyCredentialRegistrationManagerStatics const&) & noexcept =
        default;
    IEnterpriseKeyCredentialRegistrationManagerStatics& operator=(
        IEnterpriseKeyCredentialRegistrationManagerStatics&&) & noexcept =
        default;
  };
}
#endif
