// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_System_Threading_Core_1_H
#define WINRT_Windows_System_Threading_Core_1_H
#include "winrt/impl/Windows.System.Threading.Core.0.h"
WINRT_EXPORT namespace winrt::Windows::System::Threading::Core {
  struct __declspec(empty_bases) IPreallocatedWorkItem
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPreallocatedWorkItem> {
    IPreallocatedWorkItem(std::nullptr_t = nullptr) noexcept {}
    IPreallocatedWorkItem(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IPreallocatedWorkItem(IPreallocatedWorkItem const&) noexcept = default;
    IPreallocatedWorkItem(IPreallocatedWorkItem&&) noexcept = default;
    IPreallocatedWorkItem& operator=(IPreallocatedWorkItem const&) & noexcept =
        default;
    IPreallocatedWorkItem& operator=(IPreallocatedWorkItem&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) IPreallocatedWorkItemFactory
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPreallocatedWorkItemFactory> {
    IPreallocatedWorkItemFactory(std::nullptr_t = nullptr) noexcept {}
    IPreallocatedWorkItemFactory(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IPreallocatedWorkItemFactory(IPreallocatedWorkItemFactory const&) noexcept =
        default;
    IPreallocatedWorkItemFactory(IPreallocatedWorkItemFactory&&) noexcept =
        default;
    IPreallocatedWorkItemFactory& operator=(
        IPreallocatedWorkItemFactory const&) & noexcept = default;
    IPreallocatedWorkItemFactory& operator=(
        IPreallocatedWorkItemFactory&&) & noexcept = default;
  };
  struct __declspec(empty_bases) ISignalNotifier
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISignalNotifier> {
    ISignalNotifier(std::nullptr_t = nullptr) noexcept {}
    ISignalNotifier(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    ISignalNotifier(ISignalNotifier const&) noexcept = default;
    ISignalNotifier(ISignalNotifier&&) noexcept = default;
    ISignalNotifier& operator=(ISignalNotifier const&) & noexcept = default;
    ISignalNotifier& operator=(ISignalNotifier&&) & noexcept = default;
  };
  struct __declspec(empty_bases) ISignalNotifierStatics
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISignalNotifierStatics> {
    ISignalNotifierStatics(std::nullptr_t = nullptr) noexcept {}
    ISignalNotifierStatics(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    ISignalNotifierStatics(ISignalNotifierStatics const&) noexcept = default;
    ISignalNotifierStatics(ISignalNotifierStatics&&) noexcept = default;
    ISignalNotifierStatics& operator=(
        ISignalNotifierStatics const&) & noexcept = default;
    ISignalNotifierStatics& operator=(ISignalNotifierStatics&&) & noexcept =
        default;
  };
}
#endif
