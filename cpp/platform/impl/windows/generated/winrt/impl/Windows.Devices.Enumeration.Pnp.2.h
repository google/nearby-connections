// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Devices_Enumeration_Pnp_2_H
#define WINRT_Windows_Devices_Enumeration_Pnp_2_H
#include "winrt/impl/Windows.Devices.Enumeration.Pnp.1.h"
#include "winrt/impl/Windows.Foundation.Collections.1.h"
WINRT_EXPORT namespace winrt::Windows::Devices::Enumeration::Pnp {
  struct __declspec(empty_bases) PnpObject
      : winrt::Windows::Devices::Enumeration::Pnp::IPnpObject {
    PnpObject(std::nullptr_t) noexcept {}
    PnpObject(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Devices::Enumeration::Pnp::IPnpObject(
              ptr, take_ownership_from_abi) {}
    PnpObject(PnpObject const&) noexcept = default;
    PnpObject(PnpObject&&) noexcept = default;
    PnpObject& operator=(PnpObject const&) & noexcept = default;
    PnpObject& operator=(PnpObject&&) & noexcept = default;
    static auto CreateFromIdAsync(
        winrt::Windows::Devices::Enumeration::Pnp::PnpObjectType const& type,
        param::hstring const& id,
        param::async_iterable<hstring> const& requestedProperties);
    static auto FindAllAsync(
        winrt::Windows::Devices::Enumeration::Pnp::PnpObjectType const& type,
        param::async_iterable<hstring> const& requestedProperties);
    static auto FindAllAsync(
        winrt::Windows::Devices::Enumeration::Pnp::PnpObjectType const& type,
        param::async_iterable<hstring> const& requestedProperties,
        param::hstring const& aqsFilter);
    static auto CreateWatcher(
        winrt::Windows::Devices::Enumeration::Pnp::PnpObjectType const& type,
        param::iterable<hstring> const& requestedProperties);
    static auto CreateWatcher(
        winrt::Windows::Devices::Enumeration::Pnp::PnpObjectType const& type,
        param::iterable<hstring> const& requestedProperties,
        param::hstring const& aqsFilter);
  };
  struct __declspec(empty_bases) PnpObjectCollection
      : winrt::Windows::Foundation::Collections::IVectorView<
            winrt::Windows::Devices::Enumeration::Pnp::PnpObject> {
    PnpObjectCollection(std::nullptr_t) noexcept {}
    PnpObjectCollection(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::Collections::IVectorView<
              winrt::Windows::Devices::Enumeration::Pnp::PnpObject>(
              ptr, take_ownership_from_abi) {}
    PnpObjectCollection(PnpObjectCollection const&) noexcept = default;
    PnpObjectCollection(PnpObjectCollection&&) noexcept = default;
    PnpObjectCollection& operator=(PnpObjectCollection const&) & noexcept =
        default;
    PnpObjectCollection& operator=(PnpObjectCollection&&) & noexcept = default;
  };
  struct __declspec(empty_bases) PnpObjectUpdate
      : winrt::Windows::Devices::Enumeration::Pnp::IPnpObjectUpdate {
    PnpObjectUpdate(std::nullptr_t) noexcept {}
    PnpObjectUpdate(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Devices::Enumeration::Pnp::IPnpObjectUpdate(
              ptr, take_ownership_from_abi) {}
    PnpObjectUpdate(PnpObjectUpdate const&) noexcept = default;
    PnpObjectUpdate(PnpObjectUpdate&&) noexcept = default;
    PnpObjectUpdate& operator=(PnpObjectUpdate const&) & noexcept = default;
    PnpObjectUpdate& operator=(PnpObjectUpdate&&) & noexcept = default;
  };
  struct __declspec(empty_bases) PnpObjectWatcher
      : winrt::Windows::Devices::Enumeration::Pnp::IPnpObjectWatcher {
    PnpObjectWatcher(std::nullptr_t) noexcept {}
    PnpObjectWatcher(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Devices::Enumeration::Pnp::IPnpObjectWatcher(
              ptr, take_ownership_from_abi) {}
    PnpObjectWatcher(PnpObjectWatcher const&) noexcept = default;
    PnpObjectWatcher(PnpObjectWatcher&&) noexcept = default;
    PnpObjectWatcher& operator=(PnpObjectWatcher const&) & noexcept = default;
    PnpObjectWatcher& operator=(PnpObjectWatcher&&) & noexcept = default;
  };
}
#endif
