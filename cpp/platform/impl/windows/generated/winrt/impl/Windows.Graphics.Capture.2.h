// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Graphics_Capture_2_H
#define WINRT_Windows_Graphics_Capture_2_H
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Windows.Graphics.1.h"
#include "winrt/impl/Windows.Graphics.Capture.1.h"
#include "winrt/impl/Windows.Graphics.DirectX.1.h"
#include "winrt/impl/Windows.Graphics.DirectX.Direct3D11.1.h"
#include "winrt/impl/Windows.UI.Composition.1.h"
WINRT_EXPORT namespace winrt::Windows::Graphics::Capture {
  struct __declspec(empty_bases) Direct3D11CaptureFrame
      : winrt::Windows::Graphics::Capture::IDirect3D11CaptureFrame,
        impl::require<Direct3D11CaptureFrame,
                      winrt::Windows::Foundation::IClosable> {
    Direct3D11CaptureFrame(std::nullptr_t) noexcept {}
    Direct3D11CaptureFrame(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Graphics::Capture::IDirect3D11CaptureFrame(
              ptr, take_ownership_from_abi) {}
    Direct3D11CaptureFrame(Direct3D11CaptureFrame const&) noexcept = default;
    Direct3D11CaptureFrame(Direct3D11CaptureFrame&&) noexcept = default;
    Direct3D11CaptureFrame& operator=(
        Direct3D11CaptureFrame const&) & noexcept = default;
    Direct3D11CaptureFrame& operator=(Direct3D11CaptureFrame&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) Direct3D11CaptureFramePool
      : winrt::Windows::Graphics::Capture::IDirect3D11CaptureFramePool,
        impl::require<Direct3D11CaptureFramePool,
                      winrt::Windows::Foundation::IClosable> {
    Direct3D11CaptureFramePool(std::nullptr_t) noexcept {}
    Direct3D11CaptureFramePool(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Graphics::Capture::IDirect3D11CaptureFramePool(
              ptr, take_ownership_from_abi) {}
    Direct3D11CaptureFramePool(Direct3D11CaptureFramePool const&) noexcept =
        default;
    Direct3D11CaptureFramePool(Direct3D11CaptureFramePool&&) noexcept = default;
    Direct3D11CaptureFramePool& operator=(
        Direct3D11CaptureFramePool const&) & noexcept = default;
    Direct3D11CaptureFramePool& operator=(
        Direct3D11CaptureFramePool&&) & noexcept = default;
    static auto Create(
        winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice const&
            device,
        winrt::Windows::Graphics::DirectX::DirectXPixelFormat const&
            pixelFormat,
        int32_t numberOfBuffers,
        winrt::Windows::Graphics::SizeInt32 const& size);
    static auto CreateFreeThreaded(
        winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice const&
            device,
        winrt::Windows::Graphics::DirectX::DirectXPixelFormat const&
            pixelFormat,
        int32_t numberOfBuffers,
        winrt::Windows::Graphics::SizeInt32 const& size);
  };
  struct __declspec(empty_bases) GraphicsCaptureItem
      : winrt::Windows::Graphics::Capture::IGraphicsCaptureItem {
    GraphicsCaptureItem(std::nullptr_t) noexcept {}
    GraphicsCaptureItem(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Graphics::Capture::IGraphicsCaptureItem(
              ptr, take_ownership_from_abi) {}
    GraphicsCaptureItem(GraphicsCaptureItem const&) noexcept = default;
    GraphicsCaptureItem(GraphicsCaptureItem&&) noexcept = default;
    GraphicsCaptureItem& operator=(GraphicsCaptureItem const&) & noexcept =
        default;
    GraphicsCaptureItem& operator=(GraphicsCaptureItem&&) & noexcept = default;
    static auto CreateFromVisual(
        winrt::Windows::UI::Composition::Visual const& visual);
  };
  struct __declspec(empty_bases) GraphicsCapturePicker
      : winrt::Windows::Graphics::Capture::IGraphicsCapturePicker {
    GraphicsCapturePicker(std::nullptr_t) noexcept {}
    GraphicsCapturePicker(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Graphics::Capture::IGraphicsCapturePicker(
              ptr, take_ownership_from_abi) {}
    GraphicsCapturePicker();
    GraphicsCapturePicker(GraphicsCapturePicker const&) noexcept = default;
    GraphicsCapturePicker(GraphicsCapturePicker&&) noexcept = default;
    GraphicsCapturePicker& operator=(GraphicsCapturePicker const&) & noexcept =
        default;
    GraphicsCapturePicker& operator=(GraphicsCapturePicker&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) GraphicsCaptureSession
      : winrt::Windows::Graphics::Capture::IGraphicsCaptureSession,
        impl::require<
            GraphicsCaptureSession,
            winrt::Windows::Graphics::Capture::IGraphicsCaptureSession2,
            winrt::Windows::Foundation::IClosable> {
    GraphicsCaptureSession(std::nullptr_t) noexcept {}
    GraphicsCaptureSession(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Graphics::Capture::IGraphicsCaptureSession(
              ptr, take_ownership_from_abi) {}
    GraphicsCaptureSession(GraphicsCaptureSession const&) noexcept = default;
    GraphicsCaptureSession(GraphicsCaptureSession&&) noexcept = default;
    GraphicsCaptureSession& operator=(
        GraphicsCaptureSession const&) & noexcept = default;
    GraphicsCaptureSession& operator=(GraphicsCaptureSession&&) & noexcept =
        default;
    static auto IsSupported();
  };
}
#endif
