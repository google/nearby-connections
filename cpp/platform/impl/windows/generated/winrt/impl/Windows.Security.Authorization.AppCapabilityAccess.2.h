// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Security_Authorization_AppCapabilityAccess_2_H
#define WINRT_Windows_Security_Authorization_AppCapabilityAccess_2_H
#include "winrt/impl/Windows.Foundation.Collections.1.h"
#include "winrt/impl/Windows.Security.Authorization.AppCapabilityAccess.1.h"
#include "winrt/impl/Windows.System.1.h"
WINRT_EXPORT namespace winrt::Windows::Security::Authorization::
    AppCapabilityAccess {
  struct __declspec(empty_bases) AppCapability
      : winrt::Windows::Security::Authorization::AppCapabilityAccess::
            IAppCapability {
    AppCapability(std::nullptr_t) noexcept {}
    AppCapability(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Security::Authorization::AppCapabilityAccess::
              IAppCapability(ptr, take_ownership_from_abi) {}
    AppCapability(AppCapability const&) noexcept = default;
    AppCapability(AppCapability&&) noexcept = default;
    AppCapability& operator=(AppCapability const&) & noexcept = default;
    AppCapability& operator=(AppCapability&&) & noexcept = default;
    static auto RequestAccessForCapabilitiesAsync(
        param::async_iterable<hstring> const& capabilityNames);
    static auto RequestAccessForCapabilitiesForUserAsync(
        winrt::Windows::System::User const& user,
        param::async_iterable<hstring> const& capabilityNames);
    static auto Create(param::hstring const& capabilityName);
    static auto CreateWithProcessIdForUser(
        winrt::Windows::System::User const& user,
        param::hstring const& capabilityName, uint32_t pid);
  };
  struct __declspec(empty_bases) AppCapabilityAccessChangedEventArgs
      : winrt::Windows::Security::Authorization::AppCapabilityAccess::
            IAppCapabilityAccessChangedEventArgs {
    AppCapabilityAccessChangedEventArgs(std::nullptr_t) noexcept {}
    AppCapabilityAccessChangedEventArgs(void* ptr,
                                        take_ownership_from_abi_t) noexcept
        : winrt::Windows::Security::Authorization::AppCapabilityAccess::
              IAppCapabilityAccessChangedEventArgs(ptr,
                                                   take_ownership_from_abi) {}
    AppCapabilityAccessChangedEventArgs(
        AppCapabilityAccessChangedEventArgs const&) noexcept = default;
    AppCapabilityAccessChangedEventArgs(
        AppCapabilityAccessChangedEventArgs&&) noexcept = default;
    AppCapabilityAccessChangedEventArgs& operator=(
        AppCapabilityAccessChangedEventArgs const&) & noexcept = default;
    AppCapabilityAccessChangedEventArgs& operator=(
        AppCapabilityAccessChangedEventArgs&&) & noexcept = default;
  };
}
#endif
