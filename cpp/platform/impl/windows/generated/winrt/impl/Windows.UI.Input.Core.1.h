// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_UI_Input_Core_1_H
#define WINRT_Windows_UI_Input_Core_1_H
#include "winrt/impl/Windows.UI.Input.Core.0.h"
WINRT_EXPORT namespace winrt::Windows::UI::Input::Core {
  struct __declspec(empty_bases) IRadialControllerIndependentInputSource
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRadialControllerIndependentInputSource> {
    IRadialControllerIndependentInputSource(std::nullptr_t = nullptr) noexcept {
    }
    IRadialControllerIndependentInputSource(void* ptr,
                                            take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IRadialControllerIndependentInputSource(
        IRadialControllerIndependentInputSource const&) noexcept = default;
    IRadialControllerIndependentInputSource(
        IRadialControllerIndependentInputSource&&) noexcept = default;
    IRadialControllerIndependentInputSource& operator=(
        IRadialControllerIndependentInputSource const&) & noexcept = default;
    IRadialControllerIndependentInputSource& operator=(
        IRadialControllerIndependentInputSource&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IRadialControllerIndependentInputSource2
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRadialControllerIndependentInputSource2> {
    IRadialControllerIndependentInputSource2(
        std::nullptr_t = nullptr) noexcept {}
    IRadialControllerIndependentInputSource2(void* ptr,
                                             take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IRadialControllerIndependentInputSource2(
        IRadialControllerIndependentInputSource2 const&) noexcept = default;
    IRadialControllerIndependentInputSource2(
        IRadialControllerIndependentInputSource2&&) noexcept = default;
    IRadialControllerIndependentInputSource2& operator=(
        IRadialControllerIndependentInputSource2 const&) & noexcept = default;
    IRadialControllerIndependentInputSource2& operator=(
        IRadialControllerIndependentInputSource2&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IRadialControllerIndependentInputSourceStatics
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRadialControllerIndependentInputSourceStatics> {
    IRadialControllerIndependentInputSourceStatics(
        std::nullptr_t = nullptr) noexcept {}
    IRadialControllerIndependentInputSourceStatics(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IRadialControllerIndependentInputSourceStatics(
        IRadialControllerIndependentInputSourceStatics const&) noexcept =
        default;
    IRadialControllerIndependentInputSourceStatics(
        IRadialControllerIndependentInputSourceStatics&&) noexcept = default;
    IRadialControllerIndependentInputSourceStatics& operator=(
        IRadialControllerIndependentInputSourceStatics const&) & noexcept =
        default;
    IRadialControllerIndependentInputSourceStatics& operator=(
        IRadialControllerIndependentInputSourceStatics&&) & noexcept = default;
  };
}
#endif
