// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_ApplicationModel_Appointments_AppointmentsProvider_1_H
#define WINRT_Windows_ApplicationModel_Appointments_AppointmentsProvider_1_H
#include "winrt/impl/Windows.ApplicationModel.Appointments.AppointmentsProvider.0.h"
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Appointments::
    AppointmentsProvider {
  struct __declspec(empty_bases) IAddAppointmentOperation
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAddAppointmentOperation> {
    IAddAppointmentOperation(std::nullptr_t = nullptr) noexcept {}
    IAddAppointmentOperation(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IAddAppointmentOperation(IAddAppointmentOperation const&) noexcept =
        default;
    IAddAppointmentOperation(IAddAppointmentOperation&&) noexcept = default;
    IAddAppointmentOperation& operator=(
        IAddAppointmentOperation const&) & noexcept = default;
    IAddAppointmentOperation& operator=(IAddAppointmentOperation&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) IAppointmentsProviderLaunchActionVerbsStatics
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAppointmentsProviderLaunchActionVerbsStatics> {
    IAppointmentsProviderLaunchActionVerbsStatics(
        std::nullptr_t = nullptr) noexcept {}
    IAppointmentsProviderLaunchActionVerbsStatics(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IAppointmentsProviderLaunchActionVerbsStatics(
        IAppointmentsProviderLaunchActionVerbsStatics const&) noexcept =
        default;
    IAppointmentsProviderLaunchActionVerbsStatics(
        IAppointmentsProviderLaunchActionVerbsStatics&&) noexcept = default;
    IAppointmentsProviderLaunchActionVerbsStatics& operator=(
        IAppointmentsProviderLaunchActionVerbsStatics const&) & noexcept =
        default;
    IAppointmentsProviderLaunchActionVerbsStatics& operator=(
        IAppointmentsProviderLaunchActionVerbsStatics&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IAppointmentsProviderLaunchActionVerbsStatics2
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAppointmentsProviderLaunchActionVerbsStatics2> {
    IAppointmentsProviderLaunchActionVerbsStatics2(
        std::nullptr_t = nullptr) noexcept {}
    IAppointmentsProviderLaunchActionVerbsStatics2(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IAppointmentsProviderLaunchActionVerbsStatics2(
        IAppointmentsProviderLaunchActionVerbsStatics2 const&) noexcept =
        default;
    IAppointmentsProviderLaunchActionVerbsStatics2(
        IAppointmentsProviderLaunchActionVerbsStatics2&&) noexcept = default;
    IAppointmentsProviderLaunchActionVerbsStatics2& operator=(
        IAppointmentsProviderLaunchActionVerbsStatics2 const&) & noexcept =
        default;
    IAppointmentsProviderLaunchActionVerbsStatics2& operator=(
        IAppointmentsProviderLaunchActionVerbsStatics2&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IRemoveAppointmentOperation
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRemoveAppointmentOperation> {
    IRemoveAppointmentOperation(std::nullptr_t = nullptr) noexcept {}
    IRemoveAppointmentOperation(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IRemoveAppointmentOperation(IRemoveAppointmentOperation const&) noexcept =
        default;
    IRemoveAppointmentOperation(IRemoveAppointmentOperation&&) noexcept =
        default;
    IRemoveAppointmentOperation& operator=(
        IRemoveAppointmentOperation const&) & noexcept = default;
    IRemoveAppointmentOperation& operator=(
        IRemoveAppointmentOperation&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IReplaceAppointmentOperation
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IReplaceAppointmentOperation> {
    IReplaceAppointmentOperation(std::nullptr_t = nullptr) noexcept {}
    IReplaceAppointmentOperation(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IReplaceAppointmentOperation(IReplaceAppointmentOperation const&) noexcept =
        default;
    IReplaceAppointmentOperation(IReplaceAppointmentOperation&&) noexcept =
        default;
    IReplaceAppointmentOperation& operator=(
        IReplaceAppointmentOperation const&) & noexcept = default;
    IReplaceAppointmentOperation& operator=(
        IReplaceAppointmentOperation&&) & noexcept = default;
  };
}
#endif
