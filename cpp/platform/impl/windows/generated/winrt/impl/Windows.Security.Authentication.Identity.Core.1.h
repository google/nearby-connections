// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Security_Authentication_Identity_Core_1_H
#define WINRT_Windows_Security_Authentication_Identity_Core_1_H
#include "winrt/impl/Windows.Security.Authentication.Identity.Core.0.h"
WINRT_EXPORT namespace winrt::Windows::Security::Authentication::Identity::
    Core {
  struct __declspec(empty_bases)
      IMicrosoftAccountMultiFactorAuthenticationManager
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMicrosoftAccountMultiFactorAuthenticationManager> {
    IMicrosoftAccountMultiFactorAuthenticationManager(
        std::nullptr_t = nullptr) noexcept {}
    IMicrosoftAccountMultiFactorAuthenticationManager(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IMicrosoftAccountMultiFactorAuthenticationManager(
        IMicrosoftAccountMultiFactorAuthenticationManager const&) noexcept =
        default;
    IMicrosoftAccountMultiFactorAuthenticationManager(
        IMicrosoftAccountMultiFactorAuthenticationManager&&) noexcept = default;
    IMicrosoftAccountMultiFactorAuthenticationManager& operator=(
        IMicrosoftAccountMultiFactorAuthenticationManager const&) & noexcept =
        default;
    IMicrosoftAccountMultiFactorAuthenticationManager& operator=(
        IMicrosoftAccountMultiFactorAuthenticationManager&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases)
      IMicrosoftAccountMultiFactorAuthenticatorStatics
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMicrosoftAccountMultiFactorAuthenticatorStatics> {
    IMicrosoftAccountMultiFactorAuthenticatorStatics(
        std::nullptr_t = nullptr) noexcept {}
    IMicrosoftAccountMultiFactorAuthenticatorStatics(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IMicrosoftAccountMultiFactorAuthenticatorStatics(
        IMicrosoftAccountMultiFactorAuthenticatorStatics const&) noexcept =
        default;
    IMicrosoftAccountMultiFactorAuthenticatorStatics(
        IMicrosoftAccountMultiFactorAuthenticatorStatics&&) noexcept = default;
    IMicrosoftAccountMultiFactorAuthenticatorStatics& operator=(
        IMicrosoftAccountMultiFactorAuthenticatorStatics const&) & noexcept =
        default;
    IMicrosoftAccountMultiFactorAuthenticatorStatics& operator=(
        IMicrosoftAccountMultiFactorAuthenticatorStatics&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) IMicrosoftAccountMultiFactorGetSessionsResult
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMicrosoftAccountMultiFactorGetSessionsResult> {
    IMicrosoftAccountMultiFactorGetSessionsResult(
        std::nullptr_t = nullptr) noexcept {}
    IMicrosoftAccountMultiFactorGetSessionsResult(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IMicrosoftAccountMultiFactorGetSessionsResult(
        IMicrosoftAccountMultiFactorGetSessionsResult const&) noexcept =
        default;
    IMicrosoftAccountMultiFactorGetSessionsResult(
        IMicrosoftAccountMultiFactorGetSessionsResult&&) noexcept = default;
    IMicrosoftAccountMultiFactorGetSessionsResult& operator=(
        IMicrosoftAccountMultiFactorGetSessionsResult const&) & noexcept =
        default;
    IMicrosoftAccountMultiFactorGetSessionsResult& operator=(
        IMicrosoftAccountMultiFactorGetSessionsResult&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IMicrosoftAccountMultiFactorOneTimeCodedInfo
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMicrosoftAccountMultiFactorOneTimeCodedInfo> {
    IMicrosoftAccountMultiFactorOneTimeCodedInfo(
        std::nullptr_t = nullptr) noexcept {}
    IMicrosoftAccountMultiFactorOneTimeCodedInfo(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IMicrosoftAccountMultiFactorOneTimeCodedInfo(
        IMicrosoftAccountMultiFactorOneTimeCodedInfo const&) noexcept = default;
    IMicrosoftAccountMultiFactorOneTimeCodedInfo(
        IMicrosoftAccountMultiFactorOneTimeCodedInfo&&) noexcept = default;
    IMicrosoftAccountMultiFactorOneTimeCodedInfo& operator=(
        IMicrosoftAccountMultiFactorOneTimeCodedInfo const&) & noexcept =
        default;
    IMicrosoftAccountMultiFactorOneTimeCodedInfo& operator=(
        IMicrosoftAccountMultiFactorOneTimeCodedInfo&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IMicrosoftAccountMultiFactorSessionInfo
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMicrosoftAccountMultiFactorSessionInfo> {
    IMicrosoftAccountMultiFactorSessionInfo(std::nullptr_t = nullptr) noexcept {
    }
    IMicrosoftAccountMultiFactorSessionInfo(void* ptr,
                                            take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IMicrosoftAccountMultiFactorSessionInfo(
        IMicrosoftAccountMultiFactorSessionInfo const&) noexcept = default;
    IMicrosoftAccountMultiFactorSessionInfo(
        IMicrosoftAccountMultiFactorSessionInfo&&) noexcept = default;
    IMicrosoftAccountMultiFactorSessionInfo& operator=(
        IMicrosoftAccountMultiFactorSessionInfo const&) & noexcept = default;
    IMicrosoftAccountMultiFactorSessionInfo& operator=(
        IMicrosoftAccountMultiFactorSessionInfo&&) & noexcept = default;
  };
  struct __declspec(empty_bases)
      IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<
            IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo> {
    IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo(
        std::nullptr_t = nullptr) noexcept {}
    IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo(
        IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo const&) noexcept =
        default;
    IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo(
        IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo&&) noexcept =
        default;
    IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo& operator=(
        IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo const&) & noexcept =
        default;
    IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo& operator=(
        IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo&&) & noexcept =
        default;
  };
}
#endif
