// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_ApplicationModel_Search_Core_1_H
#define WINRT_Windows_ApplicationModel_Search_Core_1_H
#include "winrt/impl/Windows.ApplicationModel.Search.Core.0.h"
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Search::Core {
  struct __declspec(empty_bases) IRequestingFocusOnKeyboardInputEventArgs
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRequestingFocusOnKeyboardInputEventArgs> {
    IRequestingFocusOnKeyboardInputEventArgs(
        std::nullptr_t = nullptr) noexcept {}
    IRequestingFocusOnKeyboardInputEventArgs(void* ptr,
                                             take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IRequestingFocusOnKeyboardInputEventArgs(
        IRequestingFocusOnKeyboardInputEventArgs const&) noexcept = default;
    IRequestingFocusOnKeyboardInputEventArgs(
        IRequestingFocusOnKeyboardInputEventArgs&&) noexcept = default;
    IRequestingFocusOnKeyboardInputEventArgs& operator=(
        IRequestingFocusOnKeyboardInputEventArgs const&) & noexcept = default;
    IRequestingFocusOnKeyboardInputEventArgs& operator=(
        IRequestingFocusOnKeyboardInputEventArgs&&) & noexcept = default;
  };
  struct __declspec(empty_bases) ISearchSuggestion
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISearchSuggestion> {
    ISearchSuggestion(std::nullptr_t = nullptr) noexcept {}
    ISearchSuggestion(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    ISearchSuggestion(ISearchSuggestion const&) noexcept = default;
    ISearchSuggestion(ISearchSuggestion&&) noexcept = default;
    ISearchSuggestion& operator=(ISearchSuggestion const&) & noexcept = default;
    ISearchSuggestion& operator=(ISearchSuggestion&&) & noexcept = default;
  };
  struct __declspec(empty_bases) ISearchSuggestionManager
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISearchSuggestionManager> {
    ISearchSuggestionManager(std::nullptr_t = nullptr) noexcept {}
    ISearchSuggestionManager(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    ISearchSuggestionManager(ISearchSuggestionManager const&) noexcept =
        default;
    ISearchSuggestionManager(ISearchSuggestionManager&&) noexcept = default;
    ISearchSuggestionManager& operator=(
        ISearchSuggestionManager const&) & noexcept = default;
    ISearchSuggestionManager& operator=(ISearchSuggestionManager&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) ISearchSuggestionsRequestedEventArgs
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISearchSuggestionsRequestedEventArgs> {
    ISearchSuggestionsRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
    ISearchSuggestionsRequestedEventArgs(void* ptr,
                                         take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    ISearchSuggestionsRequestedEventArgs(
        ISearchSuggestionsRequestedEventArgs const&) noexcept = default;
    ISearchSuggestionsRequestedEventArgs(
        ISearchSuggestionsRequestedEventArgs&&) noexcept = default;
    ISearchSuggestionsRequestedEventArgs& operator=(
        ISearchSuggestionsRequestedEventArgs const&) & noexcept = default;
    ISearchSuggestionsRequestedEventArgs& operator=(
        ISearchSuggestionsRequestedEventArgs&&) & noexcept = default;
  };
}
#endif
