// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Security_Authentication_Web_2_H
#define WINRT_Windows_Security_Authentication_Web_2_H
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Windows.Foundation.Collections.1.h"
#include "winrt/impl/Windows.Security.Authentication.Web.1.h"
WINRT_EXPORT namespace winrt::Windows::Security::Authentication::Web {
  struct WebAuthenticationBroker {
    WebAuthenticationBroker() = delete;
    static auto AuthenticateAsync(
        winrt::Windows::Security::Authentication::Web::
            WebAuthenticationOptions const& options,
        winrt::Windows::Foundation::Uri const& requestUri,
        winrt::Windows::Foundation::Uri const& callbackUri);
    static auto AuthenticateAsync(
        winrt::Windows::Security::Authentication::Web::
            WebAuthenticationOptions const& options,
        winrt::Windows::Foundation::Uri const& requestUri);
    static auto GetCurrentApplicationCallbackUri();
    static auto AuthenticateAndContinue(
        winrt::Windows::Foundation::Uri const& requestUri);
    static auto AuthenticateAndContinue(
        winrt::Windows::Foundation::Uri const& requestUri,
        winrt::Windows::Foundation::Uri const& callbackUri);
    static auto AuthenticateAndContinue(
        winrt::Windows::Foundation::Uri const& requestUri,
        winrt::Windows::Foundation::Uri const& callbackUri,
        winrt::Windows::Foundation::Collections::ValueSet const&
            continuationData,
        winrt::Windows::Security::Authentication::Web::
            WebAuthenticationOptions const& options);
    static auto AuthenticateSilentlyAsync(
        winrt::Windows::Foundation::Uri const& requestUri);
    static auto AuthenticateSilentlyAsync(
        winrt::Windows::Foundation::Uri const& requestUri,
        winrt::Windows::Security::Authentication::Web::
            WebAuthenticationOptions const& options);
  };
  struct __declspec(empty_bases) WebAuthenticationResult
      : winrt::Windows::Security::Authentication::Web::
            IWebAuthenticationResult {
    WebAuthenticationResult(std::nullptr_t) noexcept {}
    WebAuthenticationResult(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Security::Authentication::Web::
              IWebAuthenticationResult(ptr, take_ownership_from_abi) {}
    WebAuthenticationResult(WebAuthenticationResult const&) noexcept = default;
    WebAuthenticationResult(WebAuthenticationResult&&) noexcept = default;
    WebAuthenticationResult& operator=(
        WebAuthenticationResult const&) & noexcept = default;
    WebAuthenticationResult& operator=(WebAuthenticationResult&&) & noexcept =
        default;
  };
}
#endif
