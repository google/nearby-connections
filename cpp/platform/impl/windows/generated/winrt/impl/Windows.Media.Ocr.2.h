// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Media_Ocr_2_H
#define WINRT_Windows_Media_Ocr_2_H
#include "winrt/impl/Windows.Globalization.1.h"
#include "winrt/impl/Windows.Media.Ocr.1.h"
WINRT_EXPORT namespace winrt::Windows::Media::Ocr {
  struct __declspec(empty_bases) OcrEngine
      : winrt::Windows::Media::Ocr::IOcrEngine {
    OcrEngine(std::nullptr_t) noexcept {}
    OcrEngine(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Media::Ocr::IOcrEngine(ptr, take_ownership_from_abi) {
    }
    OcrEngine(OcrEngine const&) noexcept = default;
    OcrEngine(OcrEngine&&) noexcept = default;
    OcrEngine& operator=(OcrEngine const&) & noexcept = default;
    OcrEngine& operator=(OcrEngine&&) & noexcept = default;
    [[nodiscard]] static auto MaxImageDimension();
    [[nodiscard]] static auto AvailableRecognizerLanguages();
    static auto IsLanguageSupported(
        winrt::Windows::Globalization::Language const& language);
    static auto TryCreateFromLanguage(
        winrt::Windows::Globalization::Language const& language);
    static auto TryCreateFromUserProfileLanguages();
  };
  struct __declspec(empty_bases) OcrLine
      : winrt::Windows::Media::Ocr::IOcrLine {
    OcrLine(std::nullptr_t) noexcept {}
    OcrLine(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Media::Ocr::IOcrLine(ptr, take_ownership_from_abi) {}
    OcrLine(OcrLine const&) noexcept = default;
    OcrLine(OcrLine&&) noexcept = default;
    OcrLine& operator=(OcrLine const&) & noexcept = default;
    OcrLine& operator=(OcrLine&&) & noexcept = default;
  };
  struct __declspec(empty_bases) OcrResult
      : winrt::Windows::Media::Ocr::IOcrResult {
    OcrResult(std::nullptr_t) noexcept {}
    OcrResult(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Media::Ocr::IOcrResult(ptr, take_ownership_from_abi) {
    }
    OcrResult(OcrResult const&) noexcept = default;
    OcrResult(OcrResult&&) noexcept = default;
    OcrResult& operator=(OcrResult const&) & noexcept = default;
    OcrResult& operator=(OcrResult&&) & noexcept = default;
  };
  struct __declspec(empty_bases) OcrWord
      : winrt::Windows::Media::Ocr::IOcrWord {
    OcrWord(std::nullptr_t) noexcept {}
    OcrWord(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Media::Ocr::IOcrWord(ptr, take_ownership_from_abi) {}
    OcrWord(OcrWord const&) noexcept = default;
    OcrWord(OcrWord&&) noexcept = default;
    OcrWord& operator=(OcrWord const&) & noexcept = default;
    OcrWord& operator=(OcrWord&&) & noexcept = default;
  };
}
#endif
