// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_UI_Popups_1_H
#define WINRT_Windows_UI_Popups_1_H
#include "winrt/impl/Windows.UI.Popups.0.h"
WINRT_EXPORT namespace winrt::Windows::UI::Popups {
  struct __declspec(empty_bases) IMessageDialog
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMessageDialog> {
    IMessageDialog(std::nullptr_t = nullptr) noexcept {}
    IMessageDialog(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IMessageDialog(IMessageDialog const&) noexcept = default;
    IMessageDialog(IMessageDialog&&) noexcept = default;
    IMessageDialog& operator=(IMessageDialog const&) & noexcept = default;
    IMessageDialog& operator=(IMessageDialog&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IMessageDialogFactory
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMessageDialogFactory> {
    IMessageDialogFactory(std::nullptr_t = nullptr) noexcept {}
    IMessageDialogFactory(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IMessageDialogFactory(IMessageDialogFactory const&) noexcept = default;
    IMessageDialogFactory(IMessageDialogFactory&&) noexcept = default;
    IMessageDialogFactory& operator=(IMessageDialogFactory const&) & noexcept =
        default;
    IMessageDialogFactory& operator=(IMessageDialogFactory&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) IPopupMenu
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPopupMenu> {
    IPopupMenu(std::nullptr_t = nullptr) noexcept {}
    IPopupMenu(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IPopupMenu(IPopupMenu const&) noexcept = default;
    IPopupMenu(IPopupMenu&&) noexcept = default;
    IPopupMenu& operator=(IPopupMenu const&) & noexcept = default;
    IPopupMenu& operator=(IPopupMenu&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IUICommand
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IUICommand> {
    IUICommand(std::nullptr_t = nullptr) noexcept {}
    IUICommand(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IUICommand(IUICommand const&) noexcept = default;
    IUICommand(IUICommand&&) noexcept = default;
    IUICommand& operator=(IUICommand const&) & noexcept = default;
    IUICommand& operator=(IUICommand&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IUICommandFactory
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IUICommandFactory> {
    IUICommandFactory(std::nullptr_t = nullptr) noexcept {}
    IUICommandFactory(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IUICommandFactory(IUICommandFactory const&) noexcept = default;
    IUICommandFactory(IUICommandFactory&&) noexcept = default;
    IUICommandFactory& operator=(IUICommandFactory const&) & noexcept = default;
    IUICommandFactory& operator=(IUICommandFactory&&) & noexcept = default;
  };
}
#endif
