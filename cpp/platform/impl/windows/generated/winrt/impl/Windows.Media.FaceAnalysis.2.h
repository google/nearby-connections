// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Media_FaceAnalysis_2_H
#define WINRT_Windows_Media_FaceAnalysis_2_H
#include "winrt/impl/Windows.Graphics.Imaging.1.h"
#include "winrt/impl/Windows.Media.FaceAnalysis.1.h"
WINRT_EXPORT namespace winrt::Windows::Media::FaceAnalysis {
  struct __declspec(empty_bases) DetectedFace
      : winrt::Windows::Media::FaceAnalysis::IDetectedFace {
    DetectedFace(std::nullptr_t) noexcept {}
    DetectedFace(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Media::FaceAnalysis::IDetectedFace(
              ptr, take_ownership_from_abi) {}
    DetectedFace(DetectedFace const&) noexcept = default;
    DetectedFace(DetectedFace&&) noexcept = default;
    DetectedFace& operator=(DetectedFace const&) & noexcept = default;
    DetectedFace& operator=(DetectedFace&&) & noexcept = default;
  };
  struct __declspec(empty_bases) FaceDetector
      : winrt::Windows::Media::FaceAnalysis::IFaceDetector {
    FaceDetector(std::nullptr_t) noexcept {}
    FaceDetector(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Media::FaceAnalysis::IFaceDetector(
              ptr, take_ownership_from_abi) {}
    FaceDetector(FaceDetector const&) noexcept = default;
    FaceDetector(FaceDetector&&) noexcept = default;
    FaceDetector& operator=(FaceDetector const&) & noexcept = default;
    FaceDetector& operator=(FaceDetector&&) & noexcept = default;
    static auto CreateAsync();
    static auto GetSupportedBitmapPixelFormats();
    static auto IsBitmapPixelFormatSupported(
        winrt::Windows::Graphics::Imaging::BitmapPixelFormat const&
            bitmapPixelFormat);
    [[nodiscard]] static auto IsSupported();
  };
  struct __declspec(empty_bases) FaceTracker
      : winrt::Windows::Media::FaceAnalysis::IFaceTracker {
    FaceTracker(std::nullptr_t) noexcept {}
    FaceTracker(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Media::FaceAnalysis::IFaceTracker(
              ptr, take_ownership_from_abi) {}
    FaceTracker(FaceTracker const&) noexcept = default;
    FaceTracker(FaceTracker&&) noexcept = default;
    FaceTracker& operator=(FaceTracker const&) & noexcept = default;
    FaceTracker& operator=(FaceTracker&&) & noexcept = default;
    static auto CreateAsync();
    static auto GetSupportedBitmapPixelFormats();
    static auto IsBitmapPixelFormatSupported(
        winrt::Windows::Graphics::Imaging::BitmapPixelFormat const&
            bitmapPixelFormat);
    [[nodiscard]] static auto IsSupported();
  };
}
#endif
