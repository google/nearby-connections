// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_ApplicationModel_ExtendedExecution_Foreground_2_H
#define WINRT_Windows_ApplicationModel_ExtendedExecution_Foreground_2_H
#include "winrt/impl/Windows.ApplicationModel.ExtendedExecution.Foreground.1.h"
#include "winrt/impl/Windows.Foundation.1.h"
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::ExtendedExecution::
    Foreground {
  struct __declspec(empty_bases) ExtendedExecutionForegroundRevokedEventArgs
      : winrt::Windows::ApplicationModel::ExtendedExecution::Foreground::
            IExtendedExecutionForegroundRevokedEventArgs {
    ExtendedExecutionForegroundRevokedEventArgs(std::nullptr_t) noexcept {}
    ExtendedExecutionForegroundRevokedEventArgs(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::ApplicationModel::ExtendedExecution::Foreground::
              IExtendedExecutionForegroundRevokedEventArgs(
                  ptr, take_ownership_from_abi) {}
    ExtendedExecutionForegroundRevokedEventArgs(
        ExtendedExecutionForegroundRevokedEventArgs const&) noexcept = default;
    ExtendedExecutionForegroundRevokedEventArgs(
        ExtendedExecutionForegroundRevokedEventArgs&&) noexcept = default;
    ExtendedExecutionForegroundRevokedEventArgs& operator=(
        ExtendedExecutionForegroundRevokedEventArgs const&) & noexcept =
        default;
    ExtendedExecutionForegroundRevokedEventArgs& operator=(
        ExtendedExecutionForegroundRevokedEventArgs&&) & noexcept = default;
  };
  struct __declspec(empty_bases) ExtendedExecutionForegroundSession
      : winrt::Windows::ApplicationModel::ExtendedExecution::Foreground::
            IExtendedExecutionForegroundSession {
    ExtendedExecutionForegroundSession(std::nullptr_t) noexcept {}
    ExtendedExecutionForegroundSession(void* ptr,
                                       take_ownership_from_abi_t) noexcept
        : winrt::Windows::ApplicationModel::ExtendedExecution::Foreground::
              IExtendedExecutionForegroundSession(ptr,
                                                  take_ownership_from_abi) {}
    ExtendedExecutionForegroundSession();
    ExtendedExecutionForegroundSession(
        ExtendedExecutionForegroundSession const&) noexcept = default;
    ExtendedExecutionForegroundSession(
        ExtendedExecutionForegroundSession&&) noexcept = default;
    ExtendedExecutionForegroundSession& operator=(
        ExtendedExecutionForegroundSession const&) & noexcept = default;
    ExtendedExecutionForegroundSession& operator=(
        ExtendedExecutionForegroundSession&&) & noexcept = default;
  };
}
#endif
