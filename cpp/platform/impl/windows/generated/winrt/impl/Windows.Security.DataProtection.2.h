// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Security_DataProtection_2_H
#define WINRT_Windows_Security_DataProtection_2_H
#include "winrt/impl/Windows.Security.DataProtection.1.h"
#include "winrt/impl/Windows.System.1.h"
WINRT_EXPORT namespace winrt::Windows::Security::DataProtection {
  struct __declspec(empty_bases) UserDataAvailabilityStateChangedEventArgs
      : winrt::Windows::Security::DataProtection::
            IUserDataAvailabilityStateChangedEventArgs {
    UserDataAvailabilityStateChangedEventArgs(std::nullptr_t) noexcept {}
    UserDataAvailabilityStateChangedEventArgs(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Security::DataProtection::
              IUserDataAvailabilityStateChangedEventArgs(
                  ptr, take_ownership_from_abi) {}
    UserDataAvailabilityStateChangedEventArgs(
        UserDataAvailabilityStateChangedEventArgs const&) noexcept = default;
    UserDataAvailabilityStateChangedEventArgs(
        UserDataAvailabilityStateChangedEventArgs&&) noexcept = default;
    UserDataAvailabilityStateChangedEventArgs& operator=(
        UserDataAvailabilityStateChangedEventArgs const&) & noexcept = default;
    UserDataAvailabilityStateChangedEventArgs& operator=(
        UserDataAvailabilityStateChangedEventArgs&&) & noexcept = default;
  };
  struct __declspec(empty_bases) UserDataBufferUnprotectResult
      : winrt::Windows::Security::DataProtection::
            IUserDataBufferUnprotectResult {
    UserDataBufferUnprotectResult(std::nullptr_t) noexcept {}
    UserDataBufferUnprotectResult(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Security::DataProtection::
              IUserDataBufferUnprotectResult(ptr, take_ownership_from_abi) {}
    UserDataBufferUnprotectResult(
        UserDataBufferUnprotectResult const&) noexcept = default;
    UserDataBufferUnprotectResult(UserDataBufferUnprotectResult&&) noexcept =
        default;
    UserDataBufferUnprotectResult& operator=(
        UserDataBufferUnprotectResult const&) & noexcept = default;
    UserDataBufferUnprotectResult& operator=(
        UserDataBufferUnprotectResult&&) & noexcept = default;
  };
  struct __declspec(empty_bases) UserDataProtectionManager
      : winrt::Windows::Security::DataProtection::IUserDataProtectionManager {
    UserDataProtectionManager(std::nullptr_t) noexcept {}
    UserDataProtectionManager(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Security::DataProtection::IUserDataProtectionManager(
              ptr, take_ownership_from_abi) {}
    UserDataProtectionManager(UserDataProtectionManager const&) noexcept =
        default;
    UserDataProtectionManager(UserDataProtectionManager&&) noexcept = default;
    UserDataProtectionManager& operator=(
        UserDataProtectionManager const&) & noexcept = default;
    UserDataProtectionManager& operator=(
        UserDataProtectionManager&&) & noexcept = default;
    static auto TryGetDefault();
    static auto TryGetForUser(winrt::Windows::System::User const& user);
  };
  struct __declspec(empty_bases) UserDataStorageItemProtectionInfo
      : winrt::Windows::Security::DataProtection::
            IUserDataStorageItemProtectionInfo {
    UserDataStorageItemProtectionInfo(std::nullptr_t) noexcept {}
    UserDataStorageItemProtectionInfo(void* ptr,
                                      take_ownership_from_abi_t) noexcept
        : winrt::Windows::Security::DataProtection::
              IUserDataStorageItemProtectionInfo(ptr, take_ownership_from_abi) {
    }
    UserDataStorageItemProtectionInfo(
        UserDataStorageItemProtectionInfo const&) noexcept = default;
    UserDataStorageItemProtectionInfo(
        UserDataStorageItemProtectionInfo&&) noexcept = default;
    UserDataStorageItemProtectionInfo& operator=(
        UserDataStorageItemProtectionInfo const&) & noexcept = default;
    UserDataStorageItemProtectionInfo& operator=(
        UserDataStorageItemProtectionInfo&&) & noexcept = default;
  };
}
#endif
