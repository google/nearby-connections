// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_System_Profile_SystemManufacturers_2_H
#define WINRT_Windows_System_Profile_SystemManufacturers_2_H
#include "winrt/impl/Windows.System.Profile.SystemManufacturers.1.h"
WINRT_EXPORT namespace winrt::Windows::System::Profile::SystemManufacturers {
  struct __declspec(empty_bases) OemSupportInfo
      : winrt::Windows::System::Profile::SystemManufacturers::IOemSupportInfo {
    OemSupportInfo(std::nullptr_t) noexcept {}
    OemSupportInfo(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::System::Profile::SystemManufacturers::IOemSupportInfo(
              ptr, take_ownership_from_abi) {}
    OemSupportInfo(OemSupportInfo const&) noexcept = default;
    OemSupportInfo(OemSupportInfo&&) noexcept = default;
    OemSupportInfo& operator=(OemSupportInfo const&) & noexcept = default;
    OemSupportInfo& operator=(OemSupportInfo&&) & noexcept = default;
  };
  struct SmbiosInformation {
    SmbiosInformation() = delete;
    [[nodiscard]] static auto SerialNumber();
  };
  struct __declspec(empty_bases) SystemSupportDeviceInfo
      : winrt::Windows::System::Profile::SystemManufacturers::
            ISystemSupportDeviceInfo {
    SystemSupportDeviceInfo(std::nullptr_t) noexcept {}
    SystemSupportDeviceInfo(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::System::Profile::SystemManufacturers::
              ISystemSupportDeviceInfo(ptr, take_ownership_from_abi) {}
    SystemSupportDeviceInfo(SystemSupportDeviceInfo const&) noexcept = default;
    SystemSupportDeviceInfo(SystemSupportDeviceInfo&&) noexcept = default;
    SystemSupportDeviceInfo& operator=(
        SystemSupportDeviceInfo const&) & noexcept = default;
    SystemSupportDeviceInfo& operator=(SystemSupportDeviceInfo&&) & noexcept =
        default;
  };
  struct SystemSupportInfo {
    SystemSupportInfo() = delete;
    [[nodiscard]] static auto LocalSystemEdition();
    [[nodiscard]] static auto OemSupportInfo();
    [[nodiscard]] static auto LocalDeviceInfo();
  };
}
#endif
