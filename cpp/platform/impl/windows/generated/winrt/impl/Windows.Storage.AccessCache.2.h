// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Storage_AccessCache_2_H
#define WINRT_Windows_Storage_AccessCache_2_H
#include "winrt/impl/Windows.Foundation.Collections.1.h"
#include "winrt/impl/Windows.Storage.AccessCache.1.h"
#include "winrt/impl/Windows.System.1.h"
WINRT_EXPORT namespace winrt::Windows::Storage::AccessCache {
  struct AccessListEntry {
    hstring Token;
    hstring Metadata;
  };
  inline bool operator==(AccessListEntry const& left,
                         AccessListEntry const& right) noexcept {
    return left.Token == right.Token && left.Metadata == right.Metadata;
  }
  inline bool operator!=(AccessListEntry const& left,
                         AccessListEntry const& right) noexcept {
    return !(left == right);
  }
  struct __declspec(empty_bases) AccessListEntryView
      : winrt::Windows::Foundation::Collections::IVectorView<
            winrt::Windows::Storage::AccessCache::AccessListEntry> {
    AccessListEntryView(std::nullptr_t) noexcept {}
    AccessListEntryView(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::Collections::IVectorView<
              winrt::Windows::Storage::AccessCache::AccessListEntry>(
              ptr, take_ownership_from_abi) {}
    AccessListEntryView(AccessListEntryView const&) noexcept = default;
    AccessListEntryView(AccessListEntryView&&) noexcept = default;
    AccessListEntryView& operator=(AccessListEntryView const&) & noexcept =
        default;
    AccessListEntryView& operator=(AccessListEntryView&&) & noexcept = default;
  };
  struct __declspec(empty_bases) ItemRemovedEventArgs
      : winrt::Windows::Storage::AccessCache::IItemRemovedEventArgs {
    ItemRemovedEventArgs(std::nullptr_t) noexcept {}
    ItemRemovedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Storage::AccessCache::IItemRemovedEventArgs(
              ptr, take_ownership_from_abi) {}
    ItemRemovedEventArgs(ItemRemovedEventArgs const&) noexcept = default;
    ItemRemovedEventArgs(ItemRemovedEventArgs&&) noexcept = default;
    ItemRemovedEventArgs& operator=(ItemRemovedEventArgs const&) & noexcept =
        default;
    ItemRemovedEventArgs& operator=(ItemRemovedEventArgs&&) & noexcept =
        default;
  };
  struct StorageApplicationPermissions {
    StorageApplicationPermissions() = delete;
    [[nodiscard]] static auto FutureAccessList();
    [[nodiscard]] static auto MostRecentlyUsedList();
    static auto GetFutureAccessListForUser(
        winrt::Windows::System::User const& user);
    static auto GetMostRecentlyUsedListForUser(
        winrt::Windows::System::User const& user);
  };
  struct __declspec(empty_bases) StorageItemAccessList
      : winrt::Windows::Storage::AccessCache::IStorageItemAccessList {
    StorageItemAccessList(std::nullptr_t) noexcept {}
    StorageItemAccessList(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Storage::AccessCache::IStorageItemAccessList(
              ptr, take_ownership_from_abi) {}
    StorageItemAccessList(StorageItemAccessList const&) noexcept = default;
    StorageItemAccessList(StorageItemAccessList&&) noexcept = default;
    StorageItemAccessList& operator=(StorageItemAccessList const&) & noexcept =
        default;
    StorageItemAccessList& operator=(StorageItemAccessList&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) StorageItemMostRecentlyUsedList
      : winrt::Windows::Storage::AccessCache::IStorageItemMostRecentlyUsedList,
        impl::require<StorageItemMostRecentlyUsedList,
                      winrt::Windows::Storage::AccessCache::
                          IStorageItemMostRecentlyUsedList2> {
    StorageItemMostRecentlyUsedList(std::nullptr_t) noexcept {}
    StorageItemMostRecentlyUsedList(void* ptr,
                                    take_ownership_from_abi_t) noexcept
        : winrt::Windows::Storage::AccessCache::
              IStorageItemMostRecentlyUsedList(ptr, take_ownership_from_abi) {}
    StorageItemMostRecentlyUsedList(
        StorageItemMostRecentlyUsedList const&) noexcept = default;
    StorageItemMostRecentlyUsedList(
        StorageItemMostRecentlyUsedList&&) noexcept = default;
    StorageItemMostRecentlyUsedList& operator=(
        StorageItemMostRecentlyUsedList const&) & noexcept = default;
    StorageItemMostRecentlyUsedList& operator=(
        StorageItemMostRecentlyUsedList&&) & noexcept = default;
    using winrt::Windows::Storage::AccessCache::
        IStorageItemMostRecentlyUsedList::Add;
    using impl::consume_t<StorageItemMostRecentlyUsedList,
                          winrt::Windows::Storage::AccessCache::
                              IStorageItemMostRecentlyUsedList2>::Add;
    using winrt::Windows::Storage::AccessCache::
        IStorageItemMostRecentlyUsedList::AddOrReplace;
    using impl::consume_t<StorageItemMostRecentlyUsedList,
                          winrt::Windows::Storage::AccessCache::
                              IStorageItemMostRecentlyUsedList2>::AddOrReplace;
  };
}
#endif
