// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_System_Diagnostics_TraceReporting_2_H
#define WINRT_Windows_System_Diagnostics_TraceReporting_2_H
#include "winrt/impl/Windows.Foundation.Collections.1.h"
#include "winrt/impl/Windows.System.Diagnostics.TraceReporting.1.h"
WINRT_EXPORT namespace winrt::Windows::System::Diagnostics::TraceReporting {
  struct PlatformDiagnosticActions {
    PlatformDiagnosticActions() = delete;
    static auto IsScenarioEnabled(winrt::guid const& scenarioId);
    static auto TryEscalateScenario(
        winrt::guid const& scenarioId,
        winrt::Windows::System::Diagnostics::TraceReporting::
            PlatformDiagnosticEscalationType const& escalationType,
        param::hstring const& outputDirectory, bool timestampOutputDirectory,
        bool forceEscalationUpload,
        param::map_view<hstring, hstring> const& triggers);
    static auto DownloadLatestSettingsForNamespace(
        param::hstring const& partner, param::hstring const& feature,
        bool isScenarioNamespace, bool downloadOverCostedNetwork,
        bool downloadOverBattery);
    static auto GetActiveScenarioList();
    static auto ForceUpload(
        winrt::Windows::System::Diagnostics::TraceReporting::
            PlatformDiagnosticEventBufferLatencies const& latency,
        bool uploadOverCostedNetwork, bool uploadOverBattery);
    static auto IsTraceRunning(
        winrt::Windows::System::Diagnostics::TraceReporting::
            PlatformDiagnosticTraceSlotType const& slotType,
        winrt::guid const& scenarioId, uint64_t traceProfileHash);
    static auto GetActiveTraceRuntime(
        winrt::Windows::System::Diagnostics::TraceReporting::
            PlatformDiagnosticTraceSlotType const& slotType);
    static auto GetKnownTraceList(
        winrt::Windows::System::Diagnostics::TraceReporting::
            PlatformDiagnosticTraceSlotType const& slotType);
  };
  struct __declspec(empty_bases) PlatformDiagnosticTraceInfo
      : winrt::Windows::System::Diagnostics::TraceReporting::
            IPlatformDiagnosticTraceInfo {
    PlatformDiagnosticTraceInfo(std::nullptr_t) noexcept {}
    PlatformDiagnosticTraceInfo(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::System::Diagnostics::TraceReporting::
              IPlatformDiagnosticTraceInfo(ptr, take_ownership_from_abi) {}
    PlatformDiagnosticTraceInfo(PlatformDiagnosticTraceInfo const&) noexcept =
        default;
    PlatformDiagnosticTraceInfo(PlatformDiagnosticTraceInfo&&) noexcept =
        default;
    PlatformDiagnosticTraceInfo& operator=(
        PlatformDiagnosticTraceInfo const&) & noexcept = default;
    PlatformDiagnosticTraceInfo& operator=(
        PlatformDiagnosticTraceInfo&&) & noexcept = default;
  };
  struct __declspec(empty_bases) PlatformDiagnosticTraceRuntimeInfo
      : winrt::Windows::System::Diagnostics::TraceReporting::
            IPlatformDiagnosticTraceRuntimeInfo {
    PlatformDiagnosticTraceRuntimeInfo(std::nullptr_t) noexcept {}
    PlatformDiagnosticTraceRuntimeInfo(void* ptr,
                                       take_ownership_from_abi_t) noexcept
        : winrt::Windows::System::Diagnostics::TraceReporting::
              IPlatformDiagnosticTraceRuntimeInfo(ptr,
                                                  take_ownership_from_abi) {}
    PlatformDiagnosticTraceRuntimeInfo(
        PlatformDiagnosticTraceRuntimeInfo const&) noexcept = default;
    PlatformDiagnosticTraceRuntimeInfo(
        PlatformDiagnosticTraceRuntimeInfo&&) noexcept = default;
    PlatformDiagnosticTraceRuntimeInfo& operator=(
        PlatformDiagnosticTraceRuntimeInfo const&) & noexcept = default;
    PlatformDiagnosticTraceRuntimeInfo& operator=(
        PlatformDiagnosticTraceRuntimeInfo&&) & noexcept = default;
  };
}
#endif
