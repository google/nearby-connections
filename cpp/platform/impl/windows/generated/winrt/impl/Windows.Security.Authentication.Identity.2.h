// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Security_Authentication_Identity_2_H
#define WINRT_Windows_Security_Authentication_Identity_2_H
#include "winrt/impl/Windows.Security.Authentication.Identity.1.h"
WINRT_EXPORT namespace winrt::Windows::Security::Authentication::Identity {
  struct __declspec(empty_bases) EnterpriseKeyCredentialRegistrationInfo
      : winrt::Windows::Security::Authentication::Identity::
            IEnterpriseKeyCredentialRegistrationInfo {
    EnterpriseKeyCredentialRegistrationInfo(std::nullptr_t) noexcept {}
    EnterpriseKeyCredentialRegistrationInfo(void* ptr,
                                            take_ownership_from_abi_t) noexcept
        : winrt::Windows::Security::Authentication::Identity::
              IEnterpriseKeyCredentialRegistrationInfo(
                  ptr, take_ownership_from_abi) {}
    EnterpriseKeyCredentialRegistrationInfo(
        EnterpriseKeyCredentialRegistrationInfo const&) noexcept = default;
    EnterpriseKeyCredentialRegistrationInfo(
        EnterpriseKeyCredentialRegistrationInfo&&) noexcept = default;
    EnterpriseKeyCredentialRegistrationInfo& operator=(
        EnterpriseKeyCredentialRegistrationInfo const&) & noexcept = default;
    EnterpriseKeyCredentialRegistrationInfo& operator=(
        EnterpriseKeyCredentialRegistrationInfo&&) & noexcept = default;
  };
  struct __declspec(empty_bases) EnterpriseKeyCredentialRegistrationManager
      : winrt::Windows::Security::Authentication::Identity::
            IEnterpriseKeyCredentialRegistrationManager {
    EnterpriseKeyCredentialRegistrationManager(std::nullptr_t) noexcept {}
    EnterpriseKeyCredentialRegistrationManager(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Security::Authentication::Identity::
              IEnterpriseKeyCredentialRegistrationManager(
                  ptr, take_ownership_from_abi) {}
    EnterpriseKeyCredentialRegistrationManager(
        EnterpriseKeyCredentialRegistrationManager const&) noexcept = default;
    EnterpriseKeyCredentialRegistrationManager(
        EnterpriseKeyCredentialRegistrationManager&&) noexcept = default;
    EnterpriseKeyCredentialRegistrationManager& operator=(
        EnterpriseKeyCredentialRegistrationManager const&) & noexcept = default;
    EnterpriseKeyCredentialRegistrationManager& operator=(
        EnterpriseKeyCredentialRegistrationManager&&) & noexcept = default;
    [[nodiscard]] static auto Current();
  };
}
#endif
