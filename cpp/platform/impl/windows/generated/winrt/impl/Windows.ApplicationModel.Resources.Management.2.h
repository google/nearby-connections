// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_ApplicationModel_Resources_Management_2_H
#define WINRT_Windows_ApplicationModel_Resources_Management_2_H
#include "winrt/impl/Windows.ApplicationModel.Resources.Management.1.h"
#include "winrt/impl/Windows.Foundation.1.h"
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Resources::Management {
  struct __declspec(empty_bases) IndexedResourceCandidate
      : winrt::Windows::ApplicationModel::Resources::Management::
            IIndexedResourceCandidate {
    IndexedResourceCandidate(std::nullptr_t) noexcept {}
    IndexedResourceCandidate(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::ApplicationModel::Resources::Management::
              IIndexedResourceCandidate(ptr, take_ownership_from_abi) {}
    IndexedResourceCandidate(IndexedResourceCandidate const&) noexcept =
        default;
    IndexedResourceCandidate(IndexedResourceCandidate&&) noexcept = default;
    IndexedResourceCandidate& operator=(
        IndexedResourceCandidate const&) & noexcept = default;
    IndexedResourceCandidate& operator=(IndexedResourceCandidate&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) IndexedResourceQualifier
      : winrt::Windows::ApplicationModel::Resources::Management::
            IIndexedResourceQualifier {
    IndexedResourceQualifier(std::nullptr_t) noexcept {}
    IndexedResourceQualifier(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::ApplicationModel::Resources::Management::
              IIndexedResourceQualifier(ptr, take_ownership_from_abi) {}
    IndexedResourceQualifier(IndexedResourceQualifier const&) noexcept =
        default;
    IndexedResourceQualifier(IndexedResourceQualifier&&) noexcept = default;
    IndexedResourceQualifier& operator=(
        IndexedResourceQualifier const&) & noexcept = default;
    IndexedResourceQualifier& operator=(IndexedResourceQualifier&&) & noexcept =
        default;
  };
  struct __declspec(empty_bases) ResourceIndexer
      : winrt::Windows::ApplicationModel::Resources::Management::
            IResourceIndexer {
    ResourceIndexer(std::nullptr_t) noexcept {}
    ResourceIndexer(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::ApplicationModel::Resources::Management::
              IResourceIndexer(ptr, take_ownership_from_abi) {}
    explicit ResourceIndexer(
        winrt::Windows::Foundation::Uri const& projectRoot);
    ResourceIndexer(winrt::Windows::Foundation::Uri const& projectRoot,
                    winrt::Windows::Foundation::Uri const& extensionDllPath);
    ResourceIndexer(ResourceIndexer const&) noexcept = default;
    ResourceIndexer(ResourceIndexer&&) noexcept = default;
    ResourceIndexer& operator=(ResourceIndexer const&) & noexcept = default;
    ResourceIndexer& operator=(ResourceIndexer&&) & noexcept = default;
  };
}
#endif
