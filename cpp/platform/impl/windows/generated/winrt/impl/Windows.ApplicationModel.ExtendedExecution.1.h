// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_ApplicationModel_ExtendedExecution_1_H
#define WINRT_Windows_ApplicationModel_ExtendedExecution_1_H
#include "winrt/impl/Windows.ApplicationModel.ExtendedExecution.0.h"
#include "winrt/impl/Windows.Foundation.0.h"
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::ExtendedExecution {
  struct __declspec(empty_bases) IExtendedExecutionRevokedEventArgs
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IExtendedExecutionRevokedEventArgs> {
    IExtendedExecutionRevokedEventArgs(std::nullptr_t = nullptr) noexcept {}
    IExtendedExecutionRevokedEventArgs(void* ptr,
                                       take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IExtendedExecutionRevokedEventArgs(
        IExtendedExecutionRevokedEventArgs const&) noexcept = default;
    IExtendedExecutionRevokedEventArgs(
        IExtendedExecutionRevokedEventArgs&&) noexcept = default;
    IExtendedExecutionRevokedEventArgs& operator=(
        IExtendedExecutionRevokedEventArgs const&) & noexcept = default;
    IExtendedExecutionRevokedEventArgs& operator=(
        IExtendedExecutionRevokedEventArgs&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IExtendedExecutionSession
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IExtendedExecutionSession>,
        impl::require<winrt::Windows::ApplicationModel::ExtendedExecution::
                          IExtendedExecutionSession,
                      winrt::Windows::Foundation::IClosable> {
    IExtendedExecutionSession(std::nullptr_t = nullptr) noexcept {}
    IExtendedExecutionSession(void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IExtendedExecutionSession(IExtendedExecutionSession const&) noexcept =
        default;
    IExtendedExecutionSession(IExtendedExecutionSession&&) noexcept = default;
    IExtendedExecutionSession& operator=(
        IExtendedExecutionSession const&) & noexcept = default;
    IExtendedExecutionSession& operator=(
        IExtendedExecutionSession&&) & noexcept = default;
  };
}
#endif
