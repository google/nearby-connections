// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Phone_PersonalInformation_Provisioning_1_H
#define WINRT_Windows_Phone_PersonalInformation_Provisioning_1_H
#include "winrt/impl/Windows.Phone.PersonalInformation.Provisioning.0.h"
WINRT_EXPORT namespace winrt::Windows::Phone::PersonalInformation::
    Provisioning {
  struct __declspec(empty_bases) IContactPartnerProvisioningManagerStatics
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IContactPartnerProvisioningManagerStatics> {
    IContactPartnerProvisioningManagerStatics(
        std::nullptr_t = nullptr) noexcept {}
    IContactPartnerProvisioningManagerStatics(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IContactPartnerProvisioningManagerStatics(
        IContactPartnerProvisioningManagerStatics const&) noexcept = default;
    IContactPartnerProvisioningManagerStatics(
        IContactPartnerProvisioningManagerStatics&&) noexcept = default;
    IContactPartnerProvisioningManagerStatics& operator=(
        IContactPartnerProvisioningManagerStatics const&) & noexcept = default;
    IContactPartnerProvisioningManagerStatics& operator=(
        IContactPartnerProvisioningManagerStatics&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IContactPartnerProvisioningManagerStatics2
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IContactPartnerProvisioningManagerStatics2> {
    IContactPartnerProvisioningManagerStatics2(
        std::nullptr_t = nullptr) noexcept {}
    IContactPartnerProvisioningManagerStatics2(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IContactPartnerProvisioningManagerStatics2(
        IContactPartnerProvisioningManagerStatics2 const&) noexcept = default;
    IContactPartnerProvisioningManagerStatics2(
        IContactPartnerProvisioningManagerStatics2&&) noexcept = default;
    IContactPartnerProvisioningManagerStatics2& operator=(
        IContactPartnerProvisioningManagerStatics2 const&) & noexcept = default;
    IContactPartnerProvisioningManagerStatics2& operator=(
        IContactPartnerProvisioningManagerStatics2&&) & noexcept = default;
  };
  struct __declspec(empty_bases) IMessagePartnerProvisioningManagerStatics
      : winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMessagePartnerProvisioningManagerStatics> {
    IMessagePartnerProvisioningManagerStatics(
        std::nullptr_t = nullptr) noexcept {}
    IMessagePartnerProvisioningManagerStatics(
        void* ptr, take_ownership_from_abi_t) noexcept
        : winrt::Windows::Foundation::IInspectable(ptr,
                                                   take_ownership_from_abi) {}
    IMessagePartnerProvisioningManagerStatics(
        IMessagePartnerProvisioningManagerStatics const&) noexcept = default;
    IMessagePartnerProvisioningManagerStatics(
        IMessagePartnerProvisioningManagerStatics&&) noexcept = default;
    IMessagePartnerProvisioningManagerStatics& operator=(
        IMessagePartnerProvisioningManagerStatics const&) & noexcept = default;
    IMessagePartnerProvisioningManagerStatics& operator=(
        IMessagePartnerProvisioningManagerStatics&&) & noexcept = default;
  };
}
#endif
