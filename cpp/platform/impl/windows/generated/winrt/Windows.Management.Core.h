// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Management_Core_H
#define WINRT_Windows_Management_Core_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.210505.3"),
              "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.210505.3"
#include "winrt/Windows.Management.h"
#include "winrt/impl/Windows.Management.Core.2.h"
#include "winrt/impl/Windows.Storage.2.h"
namespace winrt::impl {
template <typename D>
WINRT_IMPL_AUTO(winrt::Windows::Storage::ApplicationData)
consume_Windows_Management_Core_IApplicationDataManagerStatics<
    D>::CreateForPackageFamily(param::hstring const& packageFamilyName) const {
  void* applicationData{};
  check_hresult(
      WINRT_IMPL_SHIM(
          winrt::Windows::Management::Core::IApplicationDataManagerStatics)
          ->CreateForPackageFamily(*(void**)(&packageFamilyName),
                                   &applicationData));
  return winrt::Windows::Storage::ApplicationData{applicationData,
                                                  take_ownership_from_abi};
}
#ifndef WINRT_LEAN_AND_MEAN
template <typename D>
struct produce<D, winrt::Windows::Management::Core::IApplicationDataManager>
    : produce_base<D,
                   winrt::Windows::Management::Core::IApplicationDataManager> {
};
#endif
#ifndef WINRT_LEAN_AND_MEAN
template <typename D>
struct produce<D,
               winrt::Windows::Management::Core::IApplicationDataManagerStatics>
    : produce_base<
          D, winrt::Windows::Management::Core::IApplicationDataManagerStatics> {
  int32_t __stdcall CreateForPackageFamily(
      void* packageFamilyName, void** applicationData) noexcept final try {
    clear_abi(applicationData);
    typename D::abi_guard guard(this->shim());
    *applicationData = detach_from<winrt::Windows::Storage::ApplicationData>(
        this->shim().CreateForPackageFamily(
            *reinterpret_cast<hstring const*>(&packageFamilyName)));
    return 0;
  } catch (...) {
    return to_hresult();
  }
};
#endif
}  // namespace winrt::impl
WINRT_EXPORT namespace winrt::Windows::Management::Core {
  inline auto ApplicationDataManager::CreateForPackageFamily(
      param::hstring const& packageFamilyName) {
    return impl::call_factory<ApplicationDataManager,
                              IApplicationDataManagerStatics>(
        [&](IApplicationDataManagerStatics const& f) {
          return f.CreateForPackageFamily(packageFamilyName);
        });
  }
}
namespace std {
#ifndef WINRT_LEAN_AND_MEAN
template <>
struct hash<winrt::Windows::Management::Core::IApplicationDataManager>
    : winrt::impl::hash_base {};
template <>
struct hash<winrt::Windows::Management::Core::IApplicationDataManagerStatics>
    : winrt::impl::hash_base {};
template <>
struct hash<winrt::Windows::Management::Core::ApplicationDataManager>
    : winrt::impl::hash_base {};
#endif
}  // namespace std
#endif
