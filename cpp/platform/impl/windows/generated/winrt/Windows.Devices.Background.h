// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: Please don't edit this file. It was generated by C++/WinRT
// v2.0.210505.3

#ifndef WINRT_Windows_Devices_Background_H
#define WINRT_Windows_Devices_Background_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.210505.3"),
              "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.210505.3"
#include "winrt/Windows.Devices.h"
#include "winrt/impl/Windows.Devices.Background.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
namespace winrt::impl {
template <typename D>
WINRT_IMPL_AUTO(hstring)
consume_Windows_Devices_Background_IDeviceServicingDetails<D>::DeviceId()
    const {
  void* value{};
  check_hresult(
      WINRT_IMPL_SHIM(
          winrt::Windows::Devices::Background::IDeviceServicingDetails)
          ->get_DeviceId(&value));
  return hstring{value, take_ownership_from_abi};
}
template <typename D>
WINRT_IMPL_AUTO(hstring)
consume_Windows_Devices_Background_IDeviceServicingDetails<D>::Arguments()
    const {
  void* value{};
  check_hresult(
      WINRT_IMPL_SHIM(
          winrt::Windows::Devices::Background::IDeviceServicingDetails)
          ->get_Arguments(&value));
  return hstring{value, take_ownership_from_abi};
}
template <typename D>
WINRT_IMPL_AUTO(winrt::Windows::Foundation::TimeSpan)
consume_Windows_Devices_Background_IDeviceServicingDetails<
    D>::ExpectedDuration() const {
  winrt::Windows::Foundation::TimeSpan value{};
  check_hresult(
      WINRT_IMPL_SHIM(
          winrt::Windows::Devices::Background::IDeviceServicingDetails)
          ->get_ExpectedDuration(put_abi(value)));
  return value;
}
template <typename D>
WINRT_IMPL_AUTO(hstring)
consume_Windows_Devices_Background_IDeviceUseDetails<D>::DeviceId() const {
  void* value{};
  check_hresult(
      WINRT_IMPL_SHIM(winrt::Windows::Devices::Background::IDeviceUseDetails)
          ->get_DeviceId(&value));
  return hstring{value, take_ownership_from_abi};
}
template <typename D>
WINRT_IMPL_AUTO(hstring)
consume_Windows_Devices_Background_IDeviceUseDetails<D>::Arguments() const {
  void* value{};
  check_hresult(
      WINRT_IMPL_SHIM(winrt::Windows::Devices::Background::IDeviceUseDetails)
          ->get_Arguments(&value));
  return hstring{value, take_ownership_from_abi};
}
#ifndef WINRT_LEAN_AND_MEAN
template <typename D>
struct produce<D, winrt::Windows::Devices::Background::IDeviceServicingDetails>
    : produce_base<
          D, winrt::Windows::Devices::Background::IDeviceServicingDetails> {
  int32_t __stdcall get_DeviceId(void** value) noexcept final try {
    clear_abi(value);
    typename D::abi_guard guard(this->shim());
    *value = detach_from<hstring>(this->shim().DeviceId());
    return 0;
  } catch (...) {
    return to_hresult();
  }
  int32_t __stdcall get_Arguments(void** value) noexcept final try {
    clear_abi(value);
    typename D::abi_guard guard(this->shim());
    *value = detach_from<hstring>(this->shim().Arguments());
    return 0;
  } catch (...) {
    return to_hresult();
  }
  int32_t __stdcall get_ExpectedDuration(int64_t* value) noexcept final try {
    zero_abi<winrt::Windows::Foundation::TimeSpan>(value);
    typename D::abi_guard guard(this->shim());
    *value = detach_from<winrt::Windows::Foundation::TimeSpan>(
        this->shim().ExpectedDuration());
    return 0;
  } catch (...) {
    return to_hresult();
  }
};
#endif
#ifndef WINRT_LEAN_AND_MEAN
template <typename D>
struct produce<D, winrt::Windows::Devices::Background::IDeviceUseDetails>
    : produce_base<D, winrt::Windows::Devices::Background::IDeviceUseDetails> {
  int32_t __stdcall get_DeviceId(void** value) noexcept final try {
    clear_abi(value);
    typename D::abi_guard guard(this->shim());
    *value = detach_from<hstring>(this->shim().DeviceId());
    return 0;
  } catch (...) {
    return to_hresult();
  }
  int32_t __stdcall get_Arguments(void** value) noexcept final try {
    clear_abi(value);
    typename D::abi_guard guard(this->shim());
    *value = detach_from<hstring>(this->shim().Arguments());
    return 0;
  } catch (...) {
    return to_hresult();
  }
};
#endif
}  // namespace winrt::impl
WINRT_EXPORT namespace winrt::Windows::Devices::Background {}
namespace std {
#ifndef WINRT_LEAN_AND_MEAN
template <>
struct hash<winrt::Windows::Devices::Background::IDeviceServicingDetails>
    : winrt::impl::hash_base {};
template <>
struct hash<winrt::Windows::Devices::Background::IDeviceUseDetails>
    : winrt::impl::hash_base {};
template <>
struct hash<winrt::Windows::Devices::Background::DeviceServicingDetails>
    : winrt::impl::hash_base {};
template <>
struct hash<winrt::Windows::Devices::Background::DeviceUseDetails>
    : winrt::impl::hash_base {};
#endif
}  // namespace std
#endif
